commit b5e8291166e58be52bf224b8649480d54f543803
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Tue Jun 6 20:18:07 2023 +0200

    ppc64le build workarounds
    
    Patches taken from FreeBSD.

diff --git a/bridges/source/cpp_uno/gcc3_linux_powerpc64/cpp2uno.cxx b/bridges/source/cpp_uno/gcc3_linux_powerpc64/cpp2uno.cxx
index ab3fbd4c7..059c417af 100644
--- a/bridges/source/cpp_uno/gcc3_linux_powerpc64/cpp2uno.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_powerpc64/cpp2uno.cxx
@@ -341,7 +341,7 @@ static typelib_TypeClass cpp2uno_call(
 
 static typelib_TypeClass cpp_mediate(
     sal_uInt64 nOffsetAndIndex,
-        void ** gpreg, void ** fpreg, long sp,
+        void ** gpreg, void ** fpreg, long fp,
     sal_Int64 * pRegisterReturn /* space for register return */ )
 {
     static_assert(sizeof(sal_Int64)==sizeof(void *), "### unexpected!");
@@ -349,8 +349,8 @@ static typelib_TypeClass cpp_mediate(
     sal_Int32 nVtableOffset = (nOffsetAndIndex >> 32);
     sal_Int32 nFunctionIndex = (nOffsetAndIndex & 0xFFFFFFFF);
 
-    long sf = *(long*)sp;
-    void ** ovrflw = (void**)(sf + PARAMSAVE + 64);
+    /* XXX: This is the stack frame!!!! */
+    void ** ovrflw = (void**)(fp + PARAMSAVE + 64);
 
     // gpreg:  [ret *], this, [other gpr params]
     // fpreg:  [fpr params]
@@ -513,18 +513,22 @@ static typelib_TypeClass cpp_mediate(
     return eRet;
 }
 
-extern "C" void privateSnippetExecutor( ... )
+extern "C" void privateSnippetExecutor( uint64_t a, ... )
 {
+    va_list args, fpargs;
     sal_uInt64 gpreg[ppc64::MAX_GPR_REGS];
 
-    register long r3 asm("r3"); gpreg[0] = r3;
-    register long r4 asm("r4"); gpreg[1] = r4;
-    register long r5 asm("r5"); gpreg[2] = r5;
-    register long r6 asm("r6"); gpreg[3] = r6;
-    register long r7 asm("r7"); gpreg[4] = r7;
-    register long r8 asm("r8"); gpreg[5] = r8;
-    register long r9 asm("r9"); gpreg[6] = r9;
-    register long r10 asm("r10"); gpreg[7] = r10;
+    va_start(args, a);
+    va_copy(fpargs, args);
+    /* Start with all the GPRs */
+    gpreg[0] = a;
+    gpreg[1] = va_arg(args, uint64_t);
+    gpreg[2] = va_arg(args, uint64_t);
+    gpreg[3] = va_arg(args, uint64_t);
+    gpreg[4] = va_arg(args, uint64_t);
+    gpreg[5] = va_arg(args, uint64_t);
+    gpreg[6] = va_arg(args, uint64_t);
+    gpreg[7] = va_arg(args, uint64_t);
 
     double fpreg[ppc64::MAX_SSE_REGS];
 
@@ -547,11 +551,11 @@ extern "C" void privateSnippetExecutor( ... )
           "fr10", "fr11", "fr12", "fr13"
     );
 
-    register long r11 asm("r11");
-    const long nOffsetAndIndex = r11;
+    long nOffsetAndIndex;
+    long fp;
 
-    register long r1 asm("r1");
-    const long sp = r1;
+    __asm __volatile("mr %0, 11\n" : "=r"(nOffsetAndIndex));
+    fp = (long)__builtin_frame_address(0);
 
 #if defined(_CALL_ELF) && _CALL_ELF == 2
     volatile long nRegReturn[2];
@@ -560,7 +564,7 @@ extern "C" void privateSnippetExecutor( ... )
 #endif
 
     typelib_TypeClass aType =
-        cpp_mediate( nOffsetAndIndex, (void**)gpreg, (void**)fpreg, sp, (sal_Int64*)nRegReturn);
+        cpp_mediate( nOffsetAndIndex, (void**)gpreg, (void**)fpreg, fp, (sal_Int64*)nRegReturn);
 
     switch( aType )
     {
diff --git a/bridges/source/cpp_uno/gcc3_linux_powerpc64/except.cxx b/bridges/source/cpp_uno/gcc3_linux_powerpc64/except.cxx
index 1241aa02e..e1d04ef77 100644
--- a/bridges/source/cpp_uno/gcc3_linux_powerpc64/except.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_powerpc64/except.cxx
@@ -24,6 +24,7 @@
 #include <cxxabi.h>
 #include <rtl/strbuf.hxx>
 #include <rtl/ustrbuf.hxx>
+#include <sal/log.hxx>
 #include <osl/mutex.hxx>
 
 #include <com/sun/star/uno/genfunc.hxx>
@@ -226,7 +227,11 @@ void raiseException( uno_Any * pUnoExc, uno_Mapping * pUno2Cpp )
     rtti = (type_info*)rtti_data.getRTTI((typelib_CompoundTypeDescription*)pTypeDescr);
     TYPELIB_DANGER_RELEASE( pTypeDescr );
     if (! rtti)
-        terminate();
+    {
+        throw RuntimeException(
+            "no rtti for type " +
+            OUString::unacquired( &pUnoExc->pType->pTypeName ) );
+    }
     }
 
     __cxa_throw( pCppExc, rtti, deleteException );
@@ -234,18 +239,32 @@ void raiseException( uno_Any * pUnoExc, uno_Mapping * pUno2Cpp )
 
 void fillUnoException(uno_Any * pExc, uno_Mapping * pCpp2Uno)
 {
-    __cxa_exception * header = __cxa_get_globals()->caughtExceptions;
+    __cxa_exception * header =
+        reinterpret_cast<__cxa_exception *>(
+             __cxxabiv1::__cxa_current_primary_exception());
     if (! header)
-        terminate();
+    {
+        RuntimeException aRE( "no exception header!" );
+        Type const & rType = cppu::UnoType<decltype(aRE)>::get();
+        uno_type_any_constructAndConvert( pExc, &aRE, rType.getTypeLibType(), pCpp2Uno );
+        SAL_WARN("bridges", aRE.Message);
+        return;
+    }
+    __cxxabiv1::__cxa_decrement_exception_refcount(header);
 
-    std::type_info *exceptionType = __cxa_current_exception_type();
+    std::type_info *exceptionType = header[-1].exceptionType;
 
     typelib_TypeDescription * pExcTypeDescr = 0;
     OUString unoName( toUNOname( exceptionType->name() ) );
     ::typelib_typedescription_getByName( &pExcTypeDescr, unoName.pData );
     if (! pExcTypeDescr)
-        terminate();
-
+    {
+        RuntimeException aRE( "exception type not found: " + unoName );
+        Type const & rType = cppu::UnoType<decltype(aRE)>::get();
+        uno_type_any_constructAndConvert( pExc, &aRE, rType.getTypeLibType(), pCpp2Uno );
+        SAL_WARN("bridges", aRE.Message);
+        return;
+    }
     // construct uno exception any
     ::uno_any_constructAndConvert( pExc, header->adjustedPtr, pExcTypeDescr, pCpp2Uno );
     ::typelib_typedescription_release( pExcTypeDescr );
diff --git a/bridges/source/cpp_uno/gcc3_linux_powerpc64/share.hxx b/bridges/source/cpp_uno/gcc3_linux_powerpc64/share.hxx
index 8286a878a..e1d8422d2 100644
--- a/bridges/source/cpp_uno/gcc3_linux_powerpc64/share.hxx
+++ b/bridges/source/cpp_uno/gcc3_linux_powerpc64/share.hxx
@@ -24,6 +24,41 @@
 #include <exception>
 #include <cstddef>
 
+#include <cxxabi.h>
+#ifndef _GLIBCXX_CDTOR_CALLABI // new in GCC 4.7 cxxabi.h
+#define _GLIBCXX_CDTOR_CALLABI
+#endif
+#include <unwind.h>
+
+#include <config_cxxabi.h>
+
+#if !HAVE_CXXABI_H_CLASS_TYPE_INFO
+// <https://mentorembedded.github.io/cxx-abi/abi.html>,
+// libstdc++-v3/libsupc++/cxxabi.h:
+namespace __cxxabiv1 {
+class __class_type_info: public std::type_info {
+public:
+    explicit __class_type_info(char const * n): type_info(n) {}
+    ~__class_type_info() override;
+};
+}
+#endif
+
+#if !HAVE_CXXABI_H_SI_CLASS_TYPE_INFO
+// <https://mentorembedded.github.io/cxx-abi/abi.html>,
+// libstdc++-v3/libsupc++/cxxabi.h:
+namespace __cxxabiv1 {
+class __si_class_type_info: public __class_type_info {
+public:
+    __class_type_info const * __base_type;
+    explicit __si_class_type_info(
+        char const * n, __class_type_info const *base):
+        __class_type_info(n), __base_type(base) {}
+    ~__si_class_type_info() override;
+};
+}
+#endif
+
 namespace CPPU_CURRENT_NAMESPACE
 {
 
@@ -32,6 +67,7 @@ namespace CPPU_CURRENT_NAMESPACE
 
 // ----- following decl from libstdc++-v3/libsupc++/unwind-cxx.h and unwind.h
 
+#if 0
 struct _Unwind_Exception
 {
     unsigned exception_class __attribute__((__mode__(__DI__)));
@@ -39,9 +75,11 @@ struct _Unwind_Exception
     unsigned private_1 __attribute__((__mode__(__word__)));
     unsigned private_2 __attribute__((__mode__(__word__)));
 } __attribute__((__aligned__));
+#endif
 
 struct __cxa_exception
 {
+    //uintptr_t   referenceCount;
     std::type_info *exceptionType;
     void (*exceptionDestructor)(void *);
 
@@ -73,7 +111,7 @@ struct __cxa_eh_globals
 };
 
 extern "C" __cxa_eh_globals *__cxa_get_globals () throw();
-extern "C" std::type_info *__cxa_current_exception_type() throw();
+extern "C" std::type_info *__cxa_current_exception_type();
 
 void raiseException(
     uno_Any * pUnoExc, uno_Mapping * pUno2Cpp );
diff --git a/bridges/source/cpp_uno/gcc3_linux_powerpc64/uno2cpp.cxx b/bridges/source/cpp_uno/gcc3_linux_powerpc64/uno2cpp.cxx
index 612495d83..71d8f56df 100644
--- a/bridges/source/cpp_uno/gcc3_linux_powerpc64/uno2cpp.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_powerpc64/uno2cpp.cxx
@@ -212,8 +212,9 @@ static void callVirtualMethod(void * pThis, sal_uInt32 nVtableIndex,
     );
 
     // tell gcc that r3 to r11 are not available to it for doing the TOC and exception munge on the func call
-    register sal_uInt64 r3 asm("r3");
-    register sal_uInt64 r4 asm("r4");
+    long r3, r4;
+    __asm __volatile("mr %0, 3\n" : "=r"(r3));
+    __asm __volatile("mr %0, 4\n" : "=r"(r4));
 
     (*pFunc)(pGPR[0], pGPR[1], pGPR[2], pGPR[3], pGPR[4], pGPR[5], pGPR[6], pGPR[7]);
 
diff --git a/cppuhelper/source/exc_thrower.cxx b/cppuhelper/source/exc_thrower.cxx
index 57e2ad1d0..74b9bc297 100644
--- a/cppuhelper/source/exc_thrower.cxx
+++ b/cppuhelper/source/exc_thrower.cxx
@@ -224,6 +224,9 @@ namespace cppu
 
 
 void SAL_CALL throwException( Any const & exc )
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
 {
     if (exc.getValueTypeClass() != TypeClass_EXCEPTION)
     {
diff --git a/desktop/source/deployment/misc/dp_ucb.cxx b/desktop/source/deployment/misc/dp_ucb.cxx
index 5ca42f31a..173849a35 100644
--- a/desktop/source/deployment/misc/dp_ucb.cxx
+++ b/desktop/source/deployment/misc/dp_ucb.cxx
@@ -44,6 +44,9 @@ bool create_ucb_content(
     ::ucbhelper::Content * ret_ucbContent, OUString const & url,
     Reference<XCommandEnvironment> const & xCmdEnv,
     bool throw_exc )
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
 {
     try {
         // Existence check...
@@ -80,6 +83,9 @@ bool create_ucb_content(
 bool create_folder(
     ::ucbhelper::Content * ret_ucb_content, OUString const & url_,
     Reference<XCommandEnvironment> const & xCmdEnv, bool throw_exc )
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
 {
     ::ucbhelper::Content ucb_content;
     if (create_ucb_content(
diff --git a/include/com/sun/star/uno/Reference.h b/include/com/sun/star/uno/Reference.h
index 85c0d929e..cd4e3cffa 100644
--- a/include/com/sun/star/uno/Reference.h
+++ b/include/com/sun/star/uno/Reference.h
@@ -381,7 +381,11 @@ public:
 
         @return UNacquired interface pointer
     */
-    interface_type * SAL_CALL operator -> () const {
+    interface_type * SAL_CALL operator -> () const
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
+    {
         assert(_pInterface != NULL);
         return castFromXInterface(_pInterface);
     }
diff --git a/include/com/sun/star/uno/Reference.hxx b/include/com/sun/star/uno/Reference.hxx
index 7632c5504..7ab1e9009 100644
--- a/include/com/sun/star/uno/Reference.hxx
+++ b/include/com/sun/star/uno/Reference.hxx
@@ -96,6 +96,9 @@ inline XInterface * Reference< interface_type >::iquery_throw(
 template< class interface_type >
 inline interface_type * Reference< interface_type >::iset_throw(
     interface_type * pInterface )
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
 {
     if (pInterface)
     {
@@ -109,6 +112,9 @@ inline interface_type * Reference< interface_type >::iset_throw(
 
 template< class interface_type >
 inline Reference< interface_type >::~Reference() COVERITY_NOEXCEPT_FALSE
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
 {
     if (_pInterface)
         _pInterface->release();
diff --git a/include/uno/mapping.hxx b/include/uno/mapping.hxx
index 5b8cf41be..7197a5102 100644
--- a/include/uno/mapping.hxx
+++ b/include/uno/mapping.hxx
@@ -253,6 +253,9 @@ inline Mapping::Mapping( const Mapping & rMapping )
 }
 
 inline Mapping::~Mapping()
+#ifdef __powerpc__
+__attribute__((optnone))
+#endif
 {
     if (_pMapping)
         (*_pMapping->release)( _pMapping );
diff --git a/ucb/source/ucp/file/bc.cxx b/ucb/source/ucp/file/bc.cxx
index 9b0618690..1cc1768fd 100644
--- a/ucb/source/ucp/file/bc.cxx
+++ b/ucb/source/ucp/file/bc.cxx
@@ -42,6 +42,10 @@
 #include "filerror.hxx"
 #include "filinsreq.hxx"
 
+#ifdef __powerpc__
+#pragma clang optimize off
+#endif
+
 using namespace fileaccess;
 using namespace com::sun::star;
 using namespace com::sun::star::uno;
