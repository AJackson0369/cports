commit 3d8ec9fd9fe2ee26dbcf0915015d18b8b2549028
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Mon Oct 10 03:01:58 2022 +0200

    restore compatibility with latest spirv-headers release

diff --git a/layers/generated/spirv_grammar_helper.cpp b/layers/generated/spirv_grammar_helper.cpp
index 20a53aa..8ecfc91 100644
--- a/layers/generated/spirv_grammar_helper.cpp
+++ b/layers/generated/spirv_grammar_helper.cpp
@@ -365,8 +365,6 @@ static const layer_data::unordered_map<uint32_t, InstructionInfo> kInstructionTa
     {spv::OpFragmentFetchAMD, {"OpFragmentFetchAMD", true, true, 0, 0, 0}},
     {spv::OpReadClockKHR, {"OpReadClockKHR", true, true, 0, 3, 0}},
     {spv::OpImageSampleFootprintNV, {"OpImageSampleFootprintNV", true, true, 0, 0, 7}},
-    {spv::OpEmitMeshTasksEXT, {"OpEmitMeshTasksEXT", false, false, 0, 0, 0}},
-    {spv::OpSetMeshOutputsEXT, {"OpSetMeshOutputsEXT", false, false, 0, 0, 0}},
     {spv::OpGroupNonUniformPartitionNV, {"OpGroupNonUniformPartitionNV", true, true, 0, 0, 0}},
     {spv::OpWritePackedPrimitiveIndices4x8NV, {"OpWritePackedPrimitiveIndices4x8NV", false, false, 0, 0, 0}},
     {spv::OpReportIntersectionKHR, {"OpReportIntersectionKHR", true, true, 0, 0, 0}},
@@ -747,8 +745,6 @@ const char* string_SpvStorageClass(uint32_t storage_class) {
             return "ShaderRecordBufferNV";
         case spv::StorageClassPhysicalStorageBuffer:
             return "PhysicalStorageBuffer";
-        case spv::StorageClassTaskPayloadWorkgroupEXT:
-            return "TaskPayloadWorkgroupEXT";
         case spv::StorageClassCodeSectionINTEL:
             return "CodeSectionINTEL";
         case spv::StorageClassDeviceOnlyINTEL:
@@ -760,6 +756,7 @@ const char* string_SpvStorageClass(uint32_t storage_class) {
     }
 };
 
+#if 0
 const char* string_SpvExecutionModel(uint32_t execution_model) {
     switch(execution_model) {
         case spv::ExecutionModelVertex:
@@ -800,4 +797,4 @@ const char* string_SpvExecutionModel(uint32_t execution_model) {
             return "unknown";
     }
 };
-
+#endif
diff --git a/layers/generated/spirv_grammar_helper.h b/layers/generated/spirv_grammar_helper.h
index 9a2c451..9b606e0 100644
--- a/layers/generated/spirv_grammar_helper.h
+++ b/layers/generated/spirv_grammar_helper.h
@@ -50,5 +50,4 @@ uint32_t ImageOperandsParamCount(uint32_t opcode);
 
 const char* string_SpvOpcode(uint32_t opcode);
 const char* string_SpvStorageClass(uint32_t storage_class);
-const char* string_SpvExecutionModel(uint32_t execution_model);
 
diff --git a/layers/generated/spirv_validation_helper.cpp b/layers/generated/spirv_validation_helper.cpp
index 9c61db0..5576bb5 100644
--- a/layers/generated/spirv_validation_helper.cpp
+++ b/layers/generated/spirv_validation_helper.cpp
@@ -202,7 +202,6 @@ static const std::unordered_multimap<uint32_t, RequiredSpirvInfo> spirvCapabilit
     {spv::CapabilityIntegerFunctions2INTEL, {0, &VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::shaderIntegerFunctions2, nullptr, ""}},
     {spv::CapabilityInterpolationFunction, {0, &VkPhysicalDeviceFeatures::sampleRateShading, nullptr, ""}},
     {spv::CapabilityMatrix, {VK_API_VERSION_1_0, nullptr, nullptr, ""}},
-    {spv::CapabilityMeshShadingEXT, {0, nullptr, &DeviceExtensions::vk_ext_mesh_shader, ""}},
     {spv::CapabilityMeshShadingNV, {0, nullptr, &DeviceExtensions::vk_nv_mesh_shader, ""}},
     {spv::CapabilityMinLod, {0, &VkPhysicalDeviceFeatures::shaderResourceMinLod, nullptr, ""}},
     {spv::CapabilityMultiView, {0, &VkPhysicalDeviceVulkan11Features::multiview, nullptr, ""}},
@@ -509,8 +508,6 @@ static inline const char* string_SpvCapability(uint32_t input_value) {
             return "InterpolationFunction";
          case spv::CapabilityMatrix:
             return "Matrix";
-         case spv::CapabilityMeshShadingEXT:
-            return "MeshShadingEXT";
          case spv::CapabilityMeshShadingNV:
             return "MeshShadingNV";
          case spv::CapabilityMinLod:
diff --git a/layers/shader_module.cpp b/layers/shader_module.cpp
index 47dc006..4d98a59 100644
--- a/layers/shader_module.cpp
+++ b/layers/shader_module.cpp
@@ -150,10 +150,6 @@ static uint32_t ExecutionModelToShaderStageFlagBits(uint32_t mode) {
             return VK_SHADER_STAGE_TASK_BIT_NV;
         case spv::ExecutionModelMeshNV:
             return VK_SHADER_STAGE_MESH_BIT_NV;
-        case spv::ExecutionModelTaskEXT:
-            return VK_SHADER_STAGE_TASK_BIT_EXT;
-        case spv::ExecutionModelMeshEXT:
-            return VK_SHADER_STAGE_MESH_BIT_EXT;
         default:
             return 0;
     }
