From 392d66e18266184906bae257df8fa7c075636cef Mon Sep 17 00:00:00 2001
From: Daniel Kolesa <daniel@octaforge.org>
Date: Fri, 25 Feb 2022 00:32:40 +0100
Subject: [PATCH 01/11] add chimera targets, always dynamic musl + static pie

Also disable nodefaultlibs.
---
 .../src/spec/aarch64_chimera_linux_musl.rs         | 10 ++++++++++
 compiler/rustc_target/src/spec/linux_musl_base.rs  | 14 ++++++++------
 compiler/rustc_target/src/spec/mod.rs              |  5 +++++
 .../src/spec/powerpc64_chimera_linux_musl.rs       | 10 ++++++++++
 .../src/spec/powerpc64le_chimera_linux_musl.rs     | 10 ++++++++++
 .../src/spec/riscv64_chimera_linux_musl.rs         | 10 ++++++++++
 .../src/spec/x86_64_chimera_linux_musl.rs          | 10 ++++++++++
 7 files changed, 63 insertions(+), 6 deletions(-)
 create mode 100644 compiler/rustc_target/src/spec/aarch64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/powerpc64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/powerpc64le_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/riscv64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/x86_64_chimera_linux_musl.rs

diff --git a/compiler/rustc_target/src/spec/aarch64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/aarch64_chimera_linux_musl.rs
new file mode 100644
index 000000000..ff2c140aa
--- /dev/null
+++ b/compiler/rustc_target/src/spec/aarch64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub fn target() -> Target {
+    let mut base = super::aarch64_unknown_linux_musl::target();
+
+    base.llvm_target = "aarch64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/linux_musl_base.rs b/compiler/rustc_target/src/spec/linux_musl_base.rs
index 207a87ab0..5cc28b531 100644
--- a/compiler/rustc_target/src/spec/linux_musl_base.rs
+++ b/compiler/rustc_target/src/spec/linux_musl_base.rs
@@ -1,16 +1,18 @@
-use crate::spec::crt_objects::{self, CrtObjectsFallback};
 use crate::spec::TargetOptions;
 
 pub fn opts() -> TargetOptions {
     let mut base = super::linux_base::opts();
 
     base.env = "musl".into();
-    base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();
-    base.post_link_objects_fallback = crt_objects::post_musl_fallback();
-    base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);
 
-    // These targets statically link libc by default
-    base.crt_static_default = true;
+    // use dynamic musl by default
+    base.crt_static_default = false;
+    // use static pie by default
+    base.static_position_independent_executables = true;
+    // we want to link to default libraries in order to reliably
+    // get in the builtins; this will also link in libc, which
+    // we likewise want (and avoid hacks in the libc module)
+    base.no_default_libraries = false;
 
     base
 }
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index f7abeafd3..a2b83c1bc 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -818,6 +818,11 @@ macro_rules! supported_targets {
 }
 
 supported_targets! {
+    ("x86_64-chimera-linux-musl", x86_64_chimera_linux_musl),
+    ("aarch64-chimera-linux-musl", aarch64_chimera_linux_musl),
+    ("powerpc64-chimera-linux-musl", powerpc64_chimera_linux_musl),
+    ("powerpc64le-chimera-linux-musl", powerpc64le_chimera_linux_musl),
+    ("riscv64-chimera-linux-musl", riscv64_chimera_linux_musl),
     ("x86_64-unknown-linux-gnu", x86_64_unknown_linux_gnu),
     ("x86_64-unknown-linux-gnux32", x86_64_unknown_linux_gnux32),
     ("i686-unknown-linux-gnu", i686_unknown_linux_gnu),
diff --git a/compiler/rustc_target/src/spec/powerpc64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/powerpc64_chimera_linux_musl.rs
new file mode 100644
index 000000000..5953e1565
--- /dev/null
+++ b/compiler/rustc_target/src/spec/powerpc64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub fn target() -> Target {
+    let mut base = super::powerpc64_unknown_linux_musl::target();
+
+    base.llvm_target = "powerpc64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/powerpc64le_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/powerpc64le_chimera_linux_musl.rs
new file mode 100644
index 000000000..29a7459b7
--- /dev/null
+++ b/compiler/rustc_target/src/spec/powerpc64le_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub fn target() -> Target {
+    let mut base = super::powerpc64le_unknown_linux_musl::target();
+
+    base.llvm_target = "powerpc64le-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/riscv64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/riscv64_chimera_linux_musl.rs
new file mode 100644
index 000000000..8c26403ce
--- /dev/null
+++ b/compiler/rustc_target/src/spec/riscv64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub fn target() -> Target {
+    let mut base = super::riscv64gc_unknown_linux_musl::target();
+
+    base.llvm_target = "riscv64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/x86_64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/x86_64_chimera_linux_musl.rs
new file mode 100644
index 000000000..9a94dd228
--- /dev/null
+++ b/compiler/rustc_target/src/spec/x86_64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub fn target() -> Target {
+    let mut base = super::x86_64_unknown_linux_musl::target();
+
+    base.llvm_target = "x86_64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
-- 
2.37.3

