bad hack by q66 to fix bad code

diff --git a/MyGUIEngine/include/MyGUI_UString.h b/MyGUIEngine/include/MyGUI_UString.h
index 0e5fd50..488bbc2 100644
--- a/MyGUIEngine/include/MyGUI_UString.h
+++ b/MyGUIEngine/include/MyGUI_UString.h
@@ -34,6 +34,7 @@
 // these are explained later
 #include <iterator>
 #include <string>
+#include <cstring>
 #if __cplusplus >= 201703L
 #include <string_view>
 #endif
@@ -172,10 +173,10 @@ namespace MyGUI
 		//! value type typedef for use in iterators
 		using value_type = code_point;
 
-		using dstring = std::basic_string<code_point>; // data string
+		using dstring = std::basic_string<char16_t>; // data string
 
 		//! string type used for returning UTF-32 formatted data
-		using utf32string = std::basic_string<unicode_char>;
+		using utf32string = std::basic_string<char32_t>;
 
 		//! This exception is used when invalid data streams are encountered
 	class MYGUI_EXPORT invalid_data: public std::runtime_error { /* i don't know why the beautifier is freaking out on this line */
@@ -648,7 +649,9 @@ namespace MyGUI
 		UString& insert( size_type index, const UString& str );
 		//! inserts \a str into the current string, at location \a index
 		UString& insert( size_type index, const code_point* str ) {
-			mData.insert( index, str );
+			const char16_t *cptr;
+			std::memcpy(&cptr, &str, sizeof(str));
+			mData.insert( index, cptr );
 			return *this;
 		}
 		//! inserts a substring of \a str (starting at \a index2 and \a num code points long) into the current string, at location \a index1
diff --git a/MyGUIEngine/src/MyGUI_UString.cpp b/MyGUIEngine/src/MyGUI_UString.cpp
index 5612da4..b8194d3 100644
--- a/MyGUIEngine/src/MyGUI_UString.cpp
+++ b/MyGUIEngine/src/MyGUI_UString.cpp
@@ -179,7 +179,10 @@ namespace MyGUI
 	//--------------------------------------------------------------------------
 	UString::value_type& UString::_fwd_iterator::operator*() const
 	{
-		return *mIter;
+		UString::value_type *rptr;
+		char16_t *ptr = &*mIter;
+		std::memcpy(&rptr, &ptr, sizeof(ptr));
+		return *rptr;
 	}
 	//--------------------------------------------------------------------------
 	UString::value_type& UString::_fwd_iterator::operator[]( difference_type n ) const
@@ -401,7 +404,10 @@ namespace MyGUI
 	//--------------------------------------------------------------------------
 	UString::value_type& UString::_rev_iterator::operator*() const
 	{
-		return mIter[-1];
+		UString::value_type *rptr;
+		char16_t *ptr = &*mIter;
+		std::memcpy(&rptr, &ptr, sizeof(ptr));
+		return rptr[-1];
 	}
 	//--------------------------------------------------------------------------
 	UString::value_type& UString::_rev_iterator::operator[]( difference_type n ) const
@@ -637,7 +643,10 @@ namespace MyGUI
 	//--------------------------------------------------------------------------
 	const UString::code_point* UString::c_str() const
 	{
-		return mData.c_str();
+		const char16_t *ptr = mData.c_str();
+		const UString::code_point *ret;
+		std::memcpy(&ret, &ptr, sizeof(ptr));
+		return ret;
 	}
 	//--------------------------------------------------------------------------
 	const UString::code_point* UString::data() const
@@ -676,18 +685,18 @@ namespace MyGUI
 	void UString::push_back( wchar_t val )
 	{
 		// we do this because the Unicode method still preserves UTF-16 code points
-		mData.push_back( static_cast<code_point>( val ) );
+		mData.push_back( static_cast<char16_t>( val ) );
 	}
 #endif
 	//--------------------------------------------------------------------------
 	void UString::push_back( code_point val )
 	{
-		mData.push_back( val );
+		mData.push_back( static_cast<char16_t>( val ) );
 	}
 
 	void UString::push_back( char val )
 	{
-		mData.push_back( static_cast<code_point>( val ) );
+		mData.push_back( static_cast<char16_t>( val ) );
 	}
 
 	bool UString::inString( unicode_char ch ) const
@@ -721,7 +730,10 @@ namespace MyGUI
 	const UString::unicode_char* UString::asUTF32_c_str() const
 	{
 		_load_buffer_UTF32();
-		return m_buffer.mUTF32StrBuffer->c_str();
+		const UString::unicode_char *ret;
+		const char32_t *sret = m_buffer.mUTF32StrBuffer->c_str();
+		std::memcpy(&ret, &sret, sizeof(sret));
+		return ret;
 	}
 
 	const std::wstring& UString::asWStr() const
@@ -738,12 +750,18 @@ namespace MyGUI
 
 	UString::code_point& UString::at( size_type loc )
 	{
-		return mData.at( loc );
+		char16_t *cptr = &mData.at (loc);
+		UString::code_point *rptr;
+		std::memcpy(&rptr, &cptr, sizeof(cptr));
+		return *rptr;
 	}
 
 	const UString::code_point& UString::at( size_type loc ) const
 	{
-		return mData.at( loc );
+		const char16_t *cptr = &mData.at (loc);
+		UString::code_point *rptr;
+		std::memcpy(&rptr, &cptr, sizeof(cptr));
+		return *rptr;
 	}
 
 	UString::unicode_char UString::getChar( size_type loc ) const
@@ -868,13 +886,17 @@ namespace MyGUI
 
 	UString& UString::assign( const code_point* str )
 	{
-		mData.assign( str );
+		const char16_t *nstr;
+		std::memcpy(&nstr, &str, sizeof(str));
+		mData.assign( nstr );
 		return *this;
 	}
 
 	UString& UString::assign( const code_point* str, size_type num )
 	{
-		mData.assign( str, num );
+		const char16_t *nstr;
+		std::memcpy(&nstr, &str, sizeof(str));
+		mData.assign( nstr, num );
 		return *this;
 	}
 
@@ -899,7 +921,7 @@ namespace MyGUI
 		std::wstring::const_iterator i, ie = wstr.end();
 		for ( i = wstr.begin(); i != ie; i++ ) {
 			tmp = static_cast<code_point>( *i );
-			mData.push_back( tmp );
+			mData.push_back( char16_t(tmp) );
 		}
 #else // otherwise we do it the safe way (which is still 100% safe to pass UTF-16 through, just slower)
 		code_point cp[3] = {0, 0, 0};
@@ -908,8 +930,8 @@ namespace MyGUI
 		for ( i = wstr.begin(); i != ie; i++ ) {
 			tmp = static_cast<unicode_char>( *i );
 			size_t l = _utf32_to_utf16( tmp, cp );
-			if ( l > 0 ) mData.push_back( cp[0] );
-			if ( l > 1 ) mData.push_back( cp[1] );
+			if ( l > 0 ) mData.push_back( char16_t(cp[0]) );
+			if ( l > 1 ) mData.push_back( char16_t(cp[1]) );
 		}
 #endif
 		return *this;
@@ -990,7 +1012,9 @@ namespace MyGUI
 
 	UString& UString::append( const code_point* str )
 	{
-		mData.append( str );
+		const char16_t *nstr;
+		std::memcpy(&nstr, &str, sizeof(str));
+		mData.append( nstr );
 		return *this;
 	}
 
@@ -1002,13 +1026,15 @@ namespace MyGUI
 
 	UString& UString::append( const code_point* str, size_type num )
 	{
-		mData.append( str, num );
+		const char16_t *nstr;
+		std::memcpy(&nstr, &str, sizeof(str));
+		mData.append( nstr, num );
 		return *this;
 	}
 
 	UString& UString::append( size_type num, code_point ch )
 	{
-		mData.append( num, ch );
+		mData.append( num, char16_t(ch) );
 		return *this;
 	}
 
@@ -1062,7 +1088,7 @@ namespace MyGUI
 	UString::iterator UString::insert( iterator i, const code_point& ch )
 	{
 		iterator ret;
-		ret.mIter = mData.insert( i.mIter, ch );
+		ret.mIter = mData.insert( i.mIter, char16_t(ch) );
 		ret.mString = this;
 		return ret;
 	}
@@ -1086,7 +1112,9 @@ namespace MyGUI
 
 	UString& UString::insert( size_type index, const code_point* str, size_type num )
 	{
-		mData.insert( index, str, num );
+		const char16_t *nstr;
+		std::memcpy(&nstr, &str, sizeof(str));
+		mData.insert( index, nstr, num );
 		return *this;
 	}
 
@@ -1143,7 +1171,7 @@ namespace MyGUI
 
 	void UString::insert( iterator i, size_type num, const code_point& ch )
 	{
-		mData.insert( i.mIter, num, ch );
+		mData.insert( i.mIter, num, char16_t(ch) );
 	}
 #if MYGUI_IS_NATIVE_WCHAR_T
 	void UString::insert( iterator i, size_type num, const wchar_t& ch )
@@ -1246,7 +1274,9 @@ namespace MyGUI
 
 	int UString::compare( const code_point* str ) const
 	{
-		return mData.compare( str );
+		const char16_t *cmp;
+		std::memcpy(&cmp, &str, sizeof(str));
+		return mData.compare( cmp );
 	}
 
 	int UString::compare( size_type index, size_type length, const UString& str ) const
@@ -1261,7 +1291,9 @@ namespace MyGUI
 
 	int UString::compare( size_type index, size_type length, const code_point* str, size_type length2 ) const
 	{
-		return mData.compare( index, length, str, length2 );
+		const char16_t *cmp;
+		std::memcpy(&cmp, &str, sizeof(str));
+		return mData.compare( index, length, cmp, length2 );
 	}
 
 #if MYGUI_IS_NATIVE_WCHAR_T
@@ -1280,26 +1312,38 @@ namespace MyGUI
 
 	UString::size_type UString::find( const UString& str, size_type index /*= 0 */ ) const
 	{
-		return mData.find( str.c_str(), index );
+		const char16_t *findp;
+		auto *srcp = str.c_str();
+		std::memcpy(&findp, &srcp, sizeof(srcp));
+		return mData.find( findp, index );
 	}
 
 	UString::size_type UString::find( const code_point* cp_str, size_type index, size_type length ) const
 	{
 		UString tmp( cp_str );
-		return mData.find( tmp.c_str(), index, length );
+		const char16_t *findp;
+		auto *srcp = tmp.c_str();
+		std::memcpy(&findp, &srcp, sizeof(srcp));
+		return mData.find( findp, index, length );
 	}
 
 	UString::size_type UString::find( const char* c_str, size_type index, size_type length ) const
 	{
 		UString tmp( c_str );
-		return mData.find( tmp.c_str(), index, length );
+		const char16_t *findp;
+		auto *srcp = tmp.c_str();
+		std::memcpy(&findp, &srcp, sizeof(srcp));
+		return mData.find( findp, index, length );
 	}
 
 #if MYGUI_IS_NATIVE_WCHAR_T
 	UString::size_type UString::find( const wchar_t* w_str, size_type index, size_type length ) const
 	{
 		UString tmp( w_str );
-		return mData.find( tmp.c_str(), index, length );
+		const char16_t *findp;
+		auto *srcp = tmp.c_str();
+		std::memcpy(&findp, &srcp, sizeof(srcp));
+		return mData.find( findp, index, length );
 	}
 #endif
 
@@ -1310,7 +1354,7 @@ namespace MyGUI
 
 	UString::size_type UString::find( code_point ch, size_type index /*= 0 */ ) const
 	{
-		return mData.find( ch, index );
+		return mData.find( char16_t(ch), index );
 	}
 
 #if MYGUI_IS_NATIVE_WCHAR_T
@@ -1329,26 +1373,38 @@ namespace MyGUI
 
 	UString::size_type UString::rfind( const UString& str, size_type index /*= 0 */ ) const
 	{
-		return mData.rfind( str.c_str(), index );
+		const char16_t *nstr;
+		const code_point *strp = str.c_str();
+		std::memcpy(&nstr, &strp, sizeof(strp));
+		return mData.rfind( nstr, index );
 	}
 
 	UString::size_type UString::rfind( const code_point* cp_str, size_type index, size_type num ) const
 	{
 		UString tmp( cp_str );
-		return mData.rfind( tmp.c_str(), index, num );
+		const char16_t *nstr;
+		const code_point *strp = tmp.c_str();
+		std::memcpy(&nstr, &strp, sizeof(strp));
+		return mData.rfind( nstr, index, num );
 	}
 
 	UString::size_type UString::rfind( const char* c_str, size_type index, size_type num ) const
 	{
 		UString tmp( c_str );
-		return mData.rfind( tmp.c_str(), index, num );
+		const char16_t *nstr;
+		const code_point *strp = tmp.c_str();
+		std::memcpy(&nstr, &strp, sizeof(strp));
+		return mData.rfind( nstr, index, num );
 	}
 
 #if MYGUI_IS_NATIVE_WCHAR_T
 	UString::size_type UString::rfind( const wchar_t* w_str, size_type index, size_type num ) const
 	{
 		UString tmp( w_str );
-		return mData.rfind( tmp.c_str(), index, num );
+		const char16_t *nstr;
+		const code_point *strp = tmp.c_str();
+		std::memcpy(&nstr, &strp, sizeof(strp));
+		return mData.rfind( nstr, index, num );
 	}
 #endif
 
@@ -1359,7 +1415,7 @@ namespace MyGUI
 
 	UString::size_type UString::rfind( code_point ch, size_type index ) const
 	{
-		return mData.rfind( ch, index );
+		return mData.rfind( char16_t(ch), index );
 	}
 
 #if MYGUI_IS_NATIVE_WCHAR_T
