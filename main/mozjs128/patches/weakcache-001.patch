
# HG changeset patch
# User Jon Coppeard <jcoppeard@mozilla.com>
# Date 1720686214 0
# Node ID ce93d107761a70e9425a5bc85713383e2cb0b54d
# Parent  62f07e3c6ab21e9cfff58bf8900618377a073e26
Bug 1907070 - Part 1: Move WeakCache into the JS namespace (backout of changeset e6babd625779) r=sfink

Differential Revision: https://phabricator.services.mozilla.com/D216166

diff --git a/js/src/gc/Compacting.cpp b/js/src/gc/Compacting.cpp
--- a/js/src/gc/Compacting.cpp
+++ b/js/src/gc/Compacting.cpp
@@ -465,17 +465,17 @@ void GCRuntime::sweepZoneAfterCompacting
   MOZ_ASSERT(zone->isGCCompacting());
 
   zone->traceWeakMaps(trc);
   zone->sweepObjectsWithWeakPointers(trc);
 
   traceWeakFinalizationObserverEdges(trc, zone);
 
   for (auto* cache : zone->weakCaches()) {
-    cache->traceWeak(trc, WeakCacheBase::DontLockStoreBuffer);
+    cache->traceWeak(trc, JS::detail::WeakCacheBase::DontLockStoreBuffer);
   }
 
   if (jit::JitZone* jitZone = zone->jitZone()) {
     jitZone->traceWeak(trc, zone);
   }
 
   for (CompartmentsInZoneIter c(zone); !c.done(); c.next()) {
     c->traceWeakNativeIterators(trc);
@@ -819,18 +819,18 @@ void GCRuntime::updateRuntimePointersToR
     // Mark all gray roots.
     traceEmbeddingGrayRoots(&trc);
     Compartment::traceIncomingCrossCompartmentEdgesForZoneGC(
         &trc, Compartment::GrayEdges);
   }
 
   // Sweep everything to fix up weak pointers.
   jit::JitRuntime::TraceWeakJitcodeGlobalTable(rt, &trc);
-  for (WeakCacheBase* cache : rt->weakCaches()) {
-    cache->traceWeak(&trc, WeakCacheBase::DontLockStoreBuffer);
+  for (JS::detail::WeakCacheBase* cache : rt->weakCaches()) {
+    cache->traceWeak(&trc, JS::detail::WeakCacheBase::DontLockStoreBuffer);
   }
 
   if (rt->hasJitRuntime() && rt->jitRuntime()->hasInterpreterEntryMap()) {
     rt->jitRuntime()->getInterpreterEntryMap()->updateScriptsAfterMovingGC();
   }
 
   // Type inference may put more blocks here to free.
   {
diff --git a/js/src/gc/GCRuntime.h b/js/src/gc/GCRuntime.h
--- a/js/src/gc/GCRuntime.h
+++ b/js/src/gc/GCRuntime.h
@@ -231,21 +231,23 @@ class ZoneList {
   explicit ZoneList(Zone* singleZone);
   void check() const;
 
   ZoneList(const ZoneList& other) = delete;
   ZoneList& operator=(const ZoneList& other) = delete;
 };
 
 struct WeakCacheToSweep {
-  WeakCacheBase* cache;
+  JS::detail::WeakCacheBase* cache;
   JS::Zone* zone;
 };
 
 class WeakCacheSweepIterator {
+  using WeakCacheBase = JS::detail::WeakCacheBase;
+
   JS::Zone* sweepZone;
   WeakCacheBase* sweepCache;
 
  public:
   explicit WeakCacheSweepIterator(JS::Zone* sweepGroup);
 
   bool done() const;
   WeakCacheToSweep get() const;
@@ -1246,17 +1248,18 @@ class GCRuntime {
    * phases of the GC.
    *
    * This is a WeakCache because not everything in this list is guaranteed to
    * end up marked (eg if you insert an object from an already-processed sweep
    * group in the middle of an incremental GC). Also, the mark queue is not
    * used during shutdown GCs. In either case, unmarked objects may need to be
    * discarded.
    */
-  WeakCache<GCVector<HeapPtr<JS::Value>, 0, SystemAllocPolicy>> testMarkQueue;
+  JS::WeakCache<GCVector<HeapPtr<JS::Value>, 0, SystemAllocPolicy>>
+      testMarkQueue;
 
   /* Position within the test mark queue. */
   size_t queuePos = 0;
 
   /* The test marking queue might want to be marking a particular color. */
   mozilla::Maybe<js::gc::MarkColor> queueMarkColor;
 
   // During gray marking, delay AssertCellIsNotGray checks by
diff --git a/js/src/gc/Sweeping.cpp b/js/src/gc/Sweeping.cpp
--- a/js/src/gc/Sweeping.cpp
+++ b/js/src/gc/Sweeping.cpp
@@ -1195,36 +1195,37 @@ IncrementalProgress GCRuntime::endMarkin
   MaybeCheckWeakMapMarking(this);
 
   return Finished;
 }
 
 // Causes the given WeakCache to be swept when run.
 class ImmediateSweepWeakCacheTask : public GCParallelTask {
   Zone* zone;
-  WeakCacheBase& cache;
+  JS::detail::WeakCacheBase& cache;
 
  public:
-  ImmediateSweepWeakCacheTask(GCRuntime* gc, Zone* zone, WeakCacheBase& wc)
+  ImmediateSweepWeakCacheTask(GCRuntime* gc, Zone* zone,
+                              JS::detail::WeakCacheBase& wc)
       : GCParallelTask(gc, gcstats::PhaseKind::SWEEP_WEAK_CACHES),
         zone(zone),
         cache(wc) {}
 
   ImmediateSweepWeakCacheTask(ImmediateSweepWeakCacheTask&& other) noexcept
       : GCParallelTask(std::move(other)),
         zone(other.zone),
         cache(other.cache) {}
 
   ImmediateSweepWeakCacheTask(const ImmediateSweepWeakCacheTask&) = delete;
 
   void run(AutoLockHelperThreadState& lock) override {
     AutoUnlockHelperThreadState unlock(lock);
     AutoSetThreadIsSweeping threadIsSweeping(zone);
     SweepingTracer trc(gc->rt);
-    cache.traceWeak(&trc, WeakCacheBase::LockStoreBuffer);
+    cache.traceWeak(&trc, JS::detail::WeakCacheBase::LockStoreBuffer);
   }
 };
 
 void GCRuntime::updateAtomsBitmap() {
   size_t collectedZones = 0;
   size_t uncollectedZones = 0;
   for (ZonesIter zone(this, SkipAtoms); !zone.done(); zone.next()) {
     if (zone->isCollecting()) {
@@ -1439,69 +1440,70 @@ void JS::Zone::sweepObjectsWithWeakPoint
 using WeakCacheTaskVector =
     mozilla::Vector<ImmediateSweepWeakCacheTask, 0, SystemAllocPolicy>;
 
 // Call a functor for all weak caches that need to be swept in the current
 // sweep group.
 template <typename Functor>
 static inline bool IterateWeakCaches(JSRuntime* rt, Functor f) {
   for (SweepGroupZonesIter zone(rt); !zone.done(); zone.next()) {
-    for (WeakCacheBase* cache : zone->weakCaches()) {
+    for (JS::detail::WeakCacheBase* cache : zone->weakCaches()) {
       if (!f(cache, zone.get())) {
         return false;
       }
     }
   }
 
-  for (WeakCacheBase* cache : rt->weakCaches()) {
+  for (JS::detail::WeakCacheBase* cache : rt->weakCaches()) {
     if (!f(cache, nullptr)) {
       return false;
     }
   }
 
   return true;
 }
 
 static bool PrepareWeakCacheTasks(JSRuntime* rt,
                                   WeakCacheTaskVector* immediateTasks) {
   // Start incremental sweeping for caches that support it or add to a vector
   // of sweep tasks to run on a helper thread.
 
   MOZ_ASSERT(immediateTasks->empty());
 
   GCRuntime* gc = &rt->gc;
-  bool ok = IterateWeakCaches(rt, [&](WeakCacheBase* cache, Zone* zone) {
-    if (cache->empty()) {
-      return true;
-    }
-
-    // Caches that support incremental sweeping will be swept later.
-    if (zone && cache->setIncrementalBarrierTracer(&gc->sweepingTracer)) {
-      return true;
-    }
-
-    return immediateTasks->emplaceBack(gc, zone, *cache);
-  });
+  bool ok =
+      IterateWeakCaches(rt, [&](JS::detail::WeakCacheBase* cache, Zone* zone) {
+        if (cache->empty()) {
+          return true;
+        }
+
+        // Caches that support incremental sweeping will be swept later.
+        if (zone && cache->setIncrementalBarrierTracer(&gc->sweepingTracer)) {
+          return true;
+        }
+
+        return immediateTasks->emplaceBack(gc, zone, *cache);
+      });
 
   if (!ok) {
     immediateTasks->clearAndFree();
   }
 
   return ok;
 }
 
 static void SweepAllWeakCachesOnMainThread(JSRuntime* rt) {
   // If we ran out of memory, do all the work on the main thread.
   gcstats::AutoPhase ap(rt->gc.stats(), gcstats::PhaseKind::SWEEP_WEAK_CACHES);
   SweepingTracer trc(rt);
-  IterateWeakCaches(rt, [&](WeakCacheBase* cache, Zone* zone) {
+  IterateWeakCaches(rt, [&](JS::detail::WeakCacheBase* cache, Zone* zone) {
     if (cache->needsIncrementalBarrier()) {
       cache->setIncrementalBarrierTracer(nullptr);
     }
-    cache->traceWeak(&trc, WeakCacheBase::LockStoreBuffer);
+    cache->traceWeak(&trc, JS::detail::WeakCacheBase::LockStoreBuffer);
     return true;
   });
 }
 
 void GCRuntime::sweepEmbeddingWeakPointers(JS::GCContext* gcx) {
   using namespace gcstats;
 
   AutoLockStoreBuffer lock(rt);
@@ -1894,21 +1896,22 @@ IncrementalProgress GCRuntime::sweepAtom
 
   return Finished;
 }
 
 static size_t IncrementalSweepWeakCache(GCRuntime* gc,
                                         const WeakCacheToSweep& item) {
   AutoSetThreadIsSweeping threadIsSweeping(item.zone);
 
-  WeakCacheBase* cache = item.cache;
+  JS::detail::WeakCacheBase* cache = item.cache;
   MOZ_ASSERT(cache->needsIncrementalBarrier());
 
   SweepingTracer trc(gc->rt);
-  size_t steps = cache->traceWeak(&trc, WeakCacheBase::LockStoreBuffer);
+  size_t steps =
+      cache->traceWeak(&trc, JS::detail::WeakCacheBase::LockStoreBuffer);
   cache->setIncrementalBarrierTracer(nullptr);
 
   return steps;
 }
 
 WeakCacheSweepIterator::WeakCacheSweepIterator(JS::Zone* sweepGroup)
     : sweepZone(sweepGroup), sweepCache(sweepZone->weakCaches().getFirst()) {
   settle();
diff --git a/js/src/gc/SweepingAPI.h b/js/src/gc/SweepingAPI.h
--- a/js/src/gc/SweepingAPI.h
+++ b/js/src/gc/SweepingAPI.h
@@ -28,29 +28,44 @@ class AutoLockStoreBuffer {
 
  public:
   explicit AutoLockStoreBuffer(JSRuntime* runtime) : runtime(runtime) {
     LockStoreBuffer(runtime);
   }
   ~AutoLockStoreBuffer() { UnlockStoreBuffer(runtime); }
 };
 
+}  // namespace gc
+}  // namespace js
+
+namespace JS {
+namespace detail {
 class WeakCacheBase;
-JS_PUBLIC_API void RegisterWeakCache(JS::Zone* zone, WeakCacheBase* cachep);
-JS_PUBLIC_API void RegisterWeakCache(JSRuntime* rt, WeakCacheBase* cachep);
+}  // namespace detail
+
+namespace shadow {
+JS_PUBLIC_API void RegisterWeakCache(JS::Zone* zone,
+                                     JS::detail::WeakCacheBase* cachep);
+JS_PUBLIC_API void RegisterWeakCache(JSRuntime* rt,
+                                     JS::detail::WeakCacheBase* cachep);
+}  // namespace shadow
+
+namespace detail {
 
 class WeakCacheBase : public mozilla::LinkedListElement<WeakCacheBase> {
   WeakCacheBase() = delete;
   explicit WeakCacheBase(const WeakCacheBase&) = delete;
 
  public:
   enum NeedsLock : bool { LockStoreBuffer = true, DontLockStoreBuffer = false };
 
-  explicit WeakCacheBase(JS::Zone* zone) { RegisterWeakCache(zone, this); }
-  explicit WeakCacheBase(JSRuntime* rt) { RegisterWeakCache(rt, this); }
+  explicit WeakCacheBase(JS::Zone* zone) {
+    shadow::RegisterWeakCache(zone, this);
+  }
+  explicit WeakCacheBase(JSRuntime* rt) { shadow::RegisterWeakCache(rt, this); }
   WeakCacheBase(WeakCacheBase&& other) = default;
   virtual ~WeakCacheBase() = default;
 
   virtual size_t traceWeak(JSTracer* trc, NeedsLock needLock) = 0;
 
   // Sweeping will be skipped if the cache is empty already.
   virtual bool empty() = 0;
 
@@ -61,24 +76,24 @@ class WeakCacheBase : public mozilla::Li
     return false;
   }
   virtual bool needsIncrementalBarrier() const {
     // Derived classes do not support incremental barriers by default.
     return false;
   }
 };
 
-}  // namespace gc
+}  // namespace detail
 
 // A WeakCache stores the given Sweepable container and links itself into a
 // list of such caches that are swept during each GC. A WeakCache can be
 // specific to a zone, or across a whole runtime, depending on which
 // constructor is used.
 template <typename T>
-class WeakCache : protected gc::WeakCacheBase,
+class WeakCache : protected detail::WeakCacheBase,
                   public js::MutableWrappedPtrOperations<T, WeakCache<T>> {
   T cache;
 
  public:
   using Type = T;
 
   template <typename... Args>
   explicit WeakCache(Zone* zone, Args&&... args)
@@ -94,30 +109,30 @@ class WeakCache : protected gc::WeakCach
     // Take the store buffer lock in case sweeping triggers any generational
     // post barriers. This is not always required and WeakCache specializations
     // may delay or skip taking the lock as appropriate.
     mozilla::Maybe<js::gc::AutoLockStoreBuffer> lock;
     if (needsLock) {
       lock.emplace(trc->runtime());
     }
 
-    JS::GCPolicy<T>::traceWeak(trc, &cache);
+    GCPolicy<T>::traceWeak(trc, &cache);
     return 0;
   }
 
   bool empty() override { return cache.empty(); }
 } JS_HAZ_NON_GC_POINTER;
 
 // Specialize WeakCache for GCHashMap to provide a barriered map that does not
 // need to be swept immediately.
 template <typename Key, typename Value, typename HashPolicy,
           typename AllocPolicy, typename MapEntryGCPolicy>
 class WeakCache<
     GCHashMap<Key, Value, HashPolicy, AllocPolicy, MapEntryGCPolicy>>
-    final : protected gc::WeakCacheBase {
+    final : protected detail::WeakCacheBase {
   using Map = GCHashMap<Key, Value, HashPolicy, AllocPolicy, MapEntryGCPolicy>;
   using Self = WeakCache<Map>;
 
   Map map;
   JSTracer* barrierTracer = nullptr;
 
  public:
   template <typename... Args>
@@ -302,17 +317,17 @@ class WeakCache<
     return map.putNew(std::forward<KeyInput>(k), std::forward<ValueInput>(v));
   }
 } JS_HAZ_NON_GC_POINTER;
 
 // Specialize WeakCache for GCHashSet to provide a barriered set that does not
 // need to be swept immediately.
 template <typename T, typename HashPolicy, typename AllocPolicy>
 class WeakCache<GCHashSet<T, HashPolicy, AllocPolicy>> final
-    : protected gc::WeakCacheBase {
+    : protected detail::WeakCacheBase {
   using Set = GCHashSet<T, HashPolicy, AllocPolicy>;
   using Self = WeakCache<Set>;
 
   Set set;
   JSTracer* barrierTracer = nullptr;
 
  public:
   using Entry = typename Set::Entry;
@@ -353,17 +368,17 @@ class WeakCache<GCHashSet<T, HashPolicy,
     return true;
   }
 
   bool needsIncrementalBarrier() const override { return barrierTracer; }
 
  private:
   static bool entryNeedsSweep(JSTracer* barrierTracer, const Entry& prior) {
     Entry entry(prior);
-    bool needsSweep = !JS::GCPolicy<T>::traceWeak(barrierTracer, &entry);
+    bool needsSweep = !GCPolicy<T>::traceWeak(barrierTracer, &entry);
     MOZ_ASSERT_IF(!needsSweep, prior == entry);  // We shouldn't update here.
     return needsSweep;
   }
 
  public:
   using Lookup = typename Set::Lookup;
   using Ptr = typename Set::Ptr;
   using AddPtr = typename Set::AddPtr;
@@ -505,11 +520,11 @@ class WeakCache<GCHashSet<T, HashPolicy,
   }
 
   template <typename TInput>
   bool putNew(const Lookup& l, TInput&& t) {
     return set.putNew(l, std::forward<TInput>(t));
   }
 } JS_HAZ_NON_GC_POINTER;
 
-}  // namespace js
+}  // namespace JS
 
 #endif  // js_SweepingAPI_h
diff --git a/js/src/gc/Zone.cpp b/js/src/gc/Zone.cpp
--- a/js/src/gc/Zone.cpp
+++ b/js/src/gc/Zone.cpp
@@ -775,18 +775,18 @@ Zone* ZoneList::removeFront() {
 }
 
 void ZoneList::clear() {
   while (!isEmpty()) {
     removeFront();
   }
 }
 
-JS_PUBLIC_API void js::gc::RegisterWeakCache(JS::Zone* zone,
-                                             WeakCacheBase* cachep) {
+JS_PUBLIC_API void JS::shadow::RegisterWeakCache(
+    JS::Zone* zone, detail::WeakCacheBase* cachep) {
   zone->registerWeakCache(cachep);
 }
 
 void Zone::traceRootsInMajorGC(JSTracer* trc) {
   if (trc->isMarkingTracer() && !isGCMarking()) {
     return;
   }
 
diff --git a/js/src/gc/Zone.h b/js/src/gc/Zone.h
--- a/js/src/gc/Zone.h
+++ b/js/src/gc/Zone.h
@@ -73,17 +73,17 @@ class ZoneCellIter;
 class MissingAllocSites {
  public:
   using SiteMap = JS::GCHashMap<uint32_t, UniquePtr<AllocSite>,
                                 DefaultHasher<uint32_t>, SystemAllocPolicy>;
 
   using ScriptMap = JS::GCHashMap<WeakHeapPtr<JSScript*>, SiteMap,
                                   StableCellHasher<WeakHeapPtr<JSScript*>>,
                                   SystemAllocPolicy>;
-  WeakCache<ScriptMap> scriptMap;
+  JS::WeakCache<ScriptMap> scriptMap;
 
   explicit MissingAllocSites(JS::Zone* zone) : scriptMap(zone) {}
 };
 
 #endif  // JS_GC_ZEAL
 
 }  // namespace gc
 
@@ -465,17 +465,17 @@ class Zone : public js::ZoneAllocator, p
       js::Vector<JS::Compartment*, 1, js::SystemAllocPolicy>;
   js::MainThreadOrGCTaskData<CompartmentVector> compartments_;
 
   // All cross-zone string wrappers in the zone.
   js::MainThreadOrGCTaskData<js::StringWrapperMap> crossZoneStringWrappers_;
 
   // List of non-ephemeron weak containers to sweep during
   // beginSweepingSweepGroup.
-  js::MainThreadOrGCTaskData<mozilla::LinkedList<js::gc::WeakCacheBase>>
+  js::MainThreadOrGCTaskData<mozilla::LinkedList<detail::WeakCacheBase>>
       weakCaches_;
 
   // Mapping from not yet marked keys to a vector of all values that the key
   // maps to in any live weak map. Separate tables for nursery and tenured
   // keys.
   js::MainThreadOrGCTaskData<js::gc::EphemeronEdgeTable> gcEphemeronEdges_;
   js::MainThreadOrGCTaskData<js::gc::EphemeronEdgeTable>
       gcNurseryEphemeronEdges_;
@@ -763,20 +763,20 @@ class Zone : public js::ZoneAllocator, p
         return minStringHeapToTenure_;
       case JS::TraceKind::BigInt:
         return minBigintHeapToTenure_;
       default:
         MOZ_CRASH("Unsupported kind for nursery allocation");
     }
   }
 
-  mozilla::LinkedList<js::gc::WeakCacheBase>& weakCaches() {
+  mozilla::LinkedList<detail::WeakCacheBase>& weakCaches() {
     return weakCaches_.ref();
   }
-  void registerWeakCache(js::gc::WeakCacheBase* cachep) {
+  void registerWeakCache(detail::WeakCacheBase* cachep) {
     weakCaches().insertBack(cachep);
   }
 
   void beforeClearDelegate(JSObject* wrapper, JSObject* delegate) {
     if (needsIncrementalBarrier()) {
       beforeClearDelegateInternal(wrapper, delegate);
     }
   }
diff --git a/js/src/jsapi-tests/testGCWeakCache.cpp b/js/src/jsapi-tests/testGCWeakCache.cpp
--- a/js/src/jsapi-tests/testGCWeakCache.cpp
+++ b/js/src/jsapi-tests/testGCWeakCache.cpp
@@ -24,17 +24,17 @@ BEGIN_TEST(testWeakCacheSet) {
   JS::RootedObject tenured2(cx, JS_NewPlainObject(cx));
   JS_GC(cx);
   JS::RootedObject nursery1(cx, JS_NewPlainObject(cx));
   JS::RootedObject nursery2(cx, JS_NewPlainObject(cx));
 
   using ObjectSet =
       GCHashSet<HeapPtr<JSObject*>, StableCellHasher<HeapPtr<JSObject*>>,
                 SystemAllocPolicy>;
-  using Cache = WeakCache<ObjectSet>;
+  using Cache = JS::WeakCache<ObjectSet>;
   Cache cache(JS::GetObjectZone(tenured1));
 
   cache.put(tenured1);
   cache.put(tenured2);
   cache.put(nursery1);
   cache.put(nursery2);
 
   // Verify relocation and that we don't sweep too aggressively.
@@ -63,17 +63,17 @@ BEGIN_TEST(testWeakCacheMap) {
   JS::RootedObject tenured1(cx, JS_NewPlainObject(cx));
   JS::RootedObject tenured2(cx, JS_NewPlainObject(cx));
   JS_GC(cx);
   JS::RootedObject nursery1(cx, JS_NewPlainObject(cx));
   JS::RootedObject nursery2(cx, JS_NewPlainObject(cx));
 
   using ObjectMap = js::GCHashMap<HeapPtr<JSObject*>, uint32_t,
                                   js::StableCellHasher<HeapPtr<JSObject*>>>;
-  using Cache = WeakCache<ObjectMap>;
+  using Cache = JS::WeakCache<ObjectMap>;
   Cache cache(JS::GetObjectZone(tenured1), cx);
 
   cache.put(tenured1, 1);
   cache.put(tenured2, 2);
   cache.put(nursery1, 3);
   cache.put(nursery2, 4);
 
   JS_GC(cx);
@@ -96,17 +96,17 @@ BEGIN_TEST(testWeakCacheMapWithUniquePtr
   JS::RootedObject tenured1(cx, JS_NewPlainObject(cx));
   JS::RootedObject tenured2(cx, JS_NewPlainObject(cx));
   JS_GC(cx);
   JS::RootedObject nursery1(cx, JS_NewPlainObject(cx));
   JS::RootedObject nursery2(cx, JS_NewPlainObject(cx));
 
   using ObjectMap = js::GCHashMap<HeapPtr<JSObject*>, UniquePtr<uint32_t>,
                                   js::StableCellHasher<HeapPtr<JSObject*>>>;
-  using Cache = WeakCache<ObjectMap>;
+  using Cache = JS::WeakCache<ObjectMap>;
   Cache cache(JS::GetObjectZone(tenured1), cx);
 
   cache.put(tenured1, MakeUnique<uint32_t>(1));
   cache.put(tenured2, MakeUnique<uint32_t>(2));
   cache.put(nursery1, MakeUnique<uint32_t>(3));
   cache.put(nursery2, MakeUnique<uint32_t>(4));
 
   JS_GC(cx);
@@ -131,17 +131,17 @@ BEGIN_TEST(testWeakCacheGCVector) {
   // this may fail and we'll get more tenured objects. That's fine:
   // the test will continue to work, it will just not test as much.
   JS::RootedObject tenured1(cx, JS_NewPlainObject(cx));
   JS::RootedObject tenured2(cx, JS_NewPlainObject(cx));
   JS_GC(cx);
   JS::RootedObject nursery1(cx, JS_NewPlainObject(cx));
   JS::RootedObject nursery2(cx, JS_NewPlainObject(cx));
 
-  using ObjectVector = WeakCache<GCVector<HeapPtr<JSObject*>>>;
+  using ObjectVector = JS::WeakCache<GCVector<HeapPtr<JSObject*>>>;
   ObjectVector cache(JS::GetObjectZone(tenured1), cx);
 
   CHECK(cache.append(tenured1));
   CHECK(cache.append(tenured2));
   CHECK(cache.append(nursery1));
   CHECK(cache.append(nursery2));
 
   JS_GC(cx);
@@ -308,17 +308,17 @@ bool SweepCacheAndFinishGC(JSContext* cx
 
   return true;
 }
 
 bool TestSet() {
   using ObjectSet =
       GCHashSet<HeapPtr<JSObject*>, StableCellHasher<HeapPtr<JSObject*>>,
                 TempAllocPolicy>;
-  using Cache = WeakCache<ObjectSet>;
+  using Cache = JS::WeakCache<ObjectSet>;
   Cache cache(JS::GetObjectZone(global), cx);
 
   // Sweep empty cache.
 
   CHECK(cache.empty());
   JS_GC(cx);
   CHECK(cache.empty());
 
@@ -437,17 +437,17 @@ bool TestSet() {
 
   return true;
 }
 
 bool TestMap() {
   using ObjectMap =
       GCHashMap<HeapPtr<JSObject*>, uint32_t,
                 StableCellHasher<HeapPtr<JSObject*>>, TempAllocPolicy>;
-  using Cache = WeakCache<ObjectMap>;
+  using Cache = JS::WeakCache<ObjectMap>;
   Cache cache(JS::GetObjectZone(global), cx);
 
   // Sweep empty cache.
 
   CHECK(cache.empty());
   JS_GC(cx);
   CHECK(cache.empty());
 
@@ -568,17 +568,17 @@ bool TestMap() {
 
   return true;
 }
 
 bool TestReplaceDyingInSet() {
   // Test replacing dying entries with ones that have the same key using the
   // various APIs.
 
-  using Cache = WeakCache<
+  using Cache = JS::WeakCache<
       GCHashSet<NumberAndObjectEntry, StableCellHasher<NumberAndObjectEntry>,
                 TempAllocPolicy>>;
   Cache cache(JS::GetObjectZone(global), cx);
 
   RootedObject value1(cx, JS_NewPlainObject(cx));
   RootedObject value2(cx, JS_NewPlainObject(cx));
   CHECK(value1);
   CHECK(value2);
@@ -627,18 +627,19 @@ bool TestReplaceDyingInSet() {
 
   return true;
 }
 
 bool TestReplaceDyingInMap() {
   // Test replacing dying entries with ones that have the same key using the
   // various APIs.
 
-  using Cache = WeakCache<GCHashMap<uint32_t, HeapPtr<JSObject*>,
-                                    DefaultHasher<uint32_t>, TempAllocPolicy>>;
+  using Cache =
+      JS::WeakCache<GCHashMap<uint32_t, HeapPtr<JSObject*>,
+                              DefaultHasher<uint32_t>, TempAllocPolicy>>;
   Cache cache(JS::GetObjectZone(global), cx);
 
   RootedObject value1(cx, JS_NewPlainObject(cx));
   RootedObject value2(cx, JS_NewPlainObject(cx));
   CHECK(value1);
   CHECK(value2);
 
   CHECK(cache.put(1, value1));
@@ -690,17 +691,17 @@ bool TestUniqueIDLookups() {
   // generated based on a unique ID. The problem is that the unique ID table
   // will have already been swept by this point so looking up a dead pointer
   // in the table will fail. This lookup happens if we try to match a live key
   // against a dead table entry with the same hash code.
 
   const size_t DeadFactor = 3;
   const size_t ObjectCount = 100;
 
-  using Cache = WeakCache<
+  using Cache = JS::WeakCache<
       GCHashSet<ObjectEntry, StableCellHasher<ObjectEntry>, TempAllocPolicy>>;
   Cache cache(JS::GetObjectZone(global), cx);
 
   Rooted<GCVector<JSObject*, 0, SystemAllocPolicy>> liveObjects(cx);
 
   for (size_t j = 0; j < ObjectCount; j++) {
     JSObject* obj = JS_NewPlainObject(cx);
     CHECK(obj);
diff --git a/js/src/shell/jsshell.h b/js/src/shell/jsshell.h
--- a/js/src/shell/jsshell.h
+++ b/js/src/shell/jsshell.h
@@ -170,17 +170,17 @@ class NonshrinkingGCObjectVector
   bool traceWeak(JSTracer* trc) {
     for (HeapPtr<JSObject*>& obj : *this) {
       TraceWeakEdge(trc, &obj, "NonshrinkingGCObjectVector element");
     }
     return true;
   }
 };
 
-using MarkBitObservers = WeakCache<NonshrinkingGCObjectVector>;
+using MarkBitObservers = JS::WeakCache<NonshrinkingGCObjectVector>;
 
 #ifdef SINGLESTEP_PROFILING
 using StackChars = Vector<char16_t, 0, SystemAllocPolicy>;
 #endif
 
 class OffThreadJob;
 
 // Per-context shell state.
diff --git a/js/src/vm/InvalidatingFuse.h b/js/src/vm/InvalidatingFuse.h
--- a/js/src/vm/InvalidatingFuse.h
+++ b/js/src/vm/InvalidatingFuse.h
@@ -49,17 +49,17 @@ class DependentScriptSet {
   InvalidatingFuse* associatedFuse;
   bool addScriptForFuse(InvalidatingFuse* fuse, Handle<JSScript*> script);
   void invalidateForFuse(JSContext* cx, InvalidatingFuse* fuse);
 
  private:
   using WeakScriptSet = GCHashSet<WeakHeapPtr<JSScript*>,
                                   StableCellHasher<WeakHeapPtr<JSScript*>>,
                                   js::SystemAllocPolicy>;
-  js::WeakCache<WeakScriptSet> weakScripts;
+  JS::WeakCache<WeakScriptSet> weakScripts;
 };
 
 class DependentScriptGroup {
   // A dependent script set pairs a fuse with a set of scripts which depend
   // on said fuse; this is a vector of script sets because the expectation for
   // now is that the number of runtime wide invalidating fuses will be small.
   // This will need to be revisited (convert to HashMap?) should that no
   // longer be the case
diff --git a/js/src/vm/Realm.h b/js/src/vm/Realm.h
--- a/js/src/vm/Realm.h
+++ b/js/src/vm/Realm.h
@@ -235,17 +235,17 @@ class ObjectRealm {
   // need to use the same lexical environment to persist lexical bindings.
   js::UniquePtr<js::ObjectWeakMap> nonSyntacticLexicalEnvironments_;
 
   ObjectRealm(const ObjectRealm&) = delete;
   void operator=(const ObjectRealm&) = delete;
 
  public:
   // Map from array buffers to views sharing that storage.
-  WeakCache<js::InnerViewTable> innerViews;
+  JS::WeakCache<js::InnerViewTable> innerViews;
 
   // Keep track of the metadata objects which can be associated with each JS
   // object. Both keys and values are in this realm.
   js::UniquePtr<js::ObjectWeakMap> objectMetadataTable;
 
   using IteratorCache =
       js::HashSet<js::PropertyIteratorObject*, js::IteratorHashPolicy,
                   js::ZoneAllocPolicy>;
diff --git a/js/src/vm/RegExpShared.h b/js/src/vm/RegExpShared.h
--- a/js/src/vm/RegExpShared.h
+++ b/js/src/vm/RegExpShared.h
@@ -319,17 +319,17 @@ class RegExpZone {
       return l.atom == r.atom && l.flags == r.flags;
     }
   };
 
   /*
    * The set of all RegExpShareds in the zone. On every GC, every RegExpShared
    * that was not marked is deleted and removed from the set.
    */
-  using Set = WeakCache<
+  using Set = JS::WeakCache<
       JS::GCHashSet<WeakHeapPtr<RegExpShared*>, Key, ZoneAllocPolicy>>;
   Set set_;
 
  public:
   explicit RegExpZone(Zone* zone);
 
   ~RegExpZone() { MOZ_ASSERT(set_.empty()); }
 
diff --git a/js/src/vm/Runtime.cpp b/js/src/vm/Runtime.cpp
--- a/js/src/vm/Runtime.cpp
+++ b/js/src/vm/Runtime.cpp
@@ -793,18 +793,18 @@ JS_PUBLIC_API void JS::EnableRecordingAl
   cx->runtime()->startRecordingAllocations(probability, callback);
 }
 
 JS_PUBLIC_API void JS::DisableRecordingAllocations(JSContext* cx) {
   MOZ_ASSERT(cx);
   cx->runtime()->stopRecordingAllocations();
 }
 
-JS_PUBLIC_API void js::gc::RegisterWeakCache(JSRuntime* rt,
-                                             gc::WeakCacheBase* cachep) {
+JS_PUBLIC_API void JS::shadow::RegisterWeakCache(
+    JSRuntime* rt, detail::WeakCacheBase* cachep) {
   rt->registerWeakCache(cachep);
 }
 
 void JSRuntime::startRecordingAllocations(
     double probability, JS::RecordAllocationsCallback callback) {
   allocationSamplingProbability = probability;
   recordAllocationCallback = callback;
 
diff --git a/js/src/vm/Runtime.h b/js/src/vm/Runtime.h
--- a/js/src/vm/Runtime.h
+++ b/js/src/vm/Runtime.h
@@ -556,23 +556,24 @@ struct JSRuntime {
 
  public:
   const JSClass* maybeWindowProxyClass() const { return windowProxyClass_; }
   void setWindowProxyClass(const JSClass* clasp) { windowProxyClass_ = clasp; }
 
  private:
   // List of non-ephemeron weak containers to sweep during
   // beginSweepingSweepGroup.
-  js::MainThreadData<mozilla::LinkedList<js::gc::WeakCacheBase>> weakCaches_;
+  js::MainThreadData<mozilla::LinkedList<JS::detail::WeakCacheBase>>
+      weakCaches_;
 
  public:
-  mozilla::LinkedList<js::gc::WeakCacheBase>& weakCaches() {
+  mozilla::LinkedList<JS::detail::WeakCacheBase>& weakCaches() {
     return weakCaches_.ref();
   }
-  void registerWeakCache(js::gc::WeakCacheBase* cachep) {
+  void registerWeakCache(JS::detail::WeakCacheBase* cachep) {
     weakCaches().insertBack(cachep);
   }
 
   template <typename T>
   struct GlobalObjectWatchersLinkAccess {
     static mozilla::DoublyLinkedListElement<T>& Get(T* aThis) {
       return aThis->onNewGlobalObjectWatchersLink;
     }
diff --git a/js/src/vm/ShapeZone.h b/js/src/vm/ShapeZone.h
--- a/js/src/vm/ShapeZone.h
+++ b/js/src/vm/ShapeZone.h
@@ -35,17 +35,17 @@ struct BaseShapeHasher {
     return mozilla::AddToHash(hash, lookup.clasp, lookup.realm);
   }
   static bool match(const WeakHeapPtr<BaseShape*>& key, const Lookup& lookup) {
     return key.unbarrieredGet()->clasp() == lookup.clasp &&
            key.unbarrieredGet()->realm() == lookup.realm &&
            key.unbarrieredGet()->proto() == lookup.proto;
   }
 };
-using BaseShapeSet = WeakCache<
+using BaseShapeSet = JS::WeakCache<
     JS::GCHashSet<WeakHeapPtr<BaseShape*>, BaseShapeHasher, SystemAllocPolicy>>;
 
 // Hash policy for the per-zone initialPropMaps set, mapping property key + info
 // to a shared property map.
 struct InitialPropMapHasher {
   struct Lookup {
     PropertyKey key;
     PropertyInfo prop;
@@ -58,18 +58,18 @@ struct InitialPropMapHasher {
   }
   static bool match(const WeakHeapPtr<SharedPropMap*>& key,
                     const Lookup& lookup) {
     const SharedPropMap* map = key.unbarrieredGet();
     return map->matchProperty(0, lookup.key, lookup.prop);
   }
 };
 using InitialPropMapSet =
-    WeakCache<JS::GCHashSet<WeakHeapPtr<SharedPropMap*>, InitialPropMapHasher,
-                            SystemAllocPolicy>>;
+    JS::WeakCache<JS::GCHashSet<WeakHeapPtr<SharedPropMap*>,
+                                InitialPropMapHasher, SystemAllocPolicy>>;
 
 // Helper class to hash information relevant for all shapes.
 struct ShapeBaseHasher {
   struct Lookup {
     const JSClass* clasp;
     JS::Realm* realm;
     TaggedProto proto;
     ObjectFlags objectFlags;
@@ -113,18 +113,18 @@ struct InitialShapeHasher {
   static bool match(const WeakHeapPtr<SharedShape*>& key,
                     const Lookup& lookup) {
     const SharedShape* shape = key.unbarrieredGet();
     return ShapeBaseHasher::match(shape, lookup) &&
            lookup.nfixed == shape->numFixedSlots();
   }
 };
 using InitialShapeSet =
-    WeakCache<JS::GCHashSet<WeakHeapPtr<SharedShape*>, InitialShapeHasher,
-                            SystemAllocPolicy>>;
+    JS::WeakCache<JS::GCHashSet<WeakHeapPtr<SharedShape*>, InitialShapeHasher,
+                                SystemAllocPolicy>>;
 
 // Hash policy for the per-zone propMapShapes set storing shared shapes with
 // shared property maps.
 struct PropMapShapeHasher {
   struct Lookup {
     BaseShape* base;
     SharedPropMap* map;
     uint32_t mapLength;
@@ -154,30 +154,30 @@ struct PropMapShapeHasher {
            lookup.objectFlags == shape->objectFlags();
   }
   static void rekey(WeakHeapPtr<SharedShape*>& k,
                     const WeakHeapPtr<SharedShape*>& newKey) {
     k = newKey;
   }
 };
 using PropMapShapeSet =
-    WeakCache<JS::GCHashSet<WeakHeapPtr<SharedShape*>, PropMapShapeHasher,
-                            SystemAllocPolicy>>;
+    JS::WeakCache<JS::GCHashSet<WeakHeapPtr<SharedShape*>, PropMapShapeHasher,
+                                SystemAllocPolicy>>;
 
 // Hash policy for the per-zone proxyShapes set storing shapes for proxy objects
 // in the zone.
 struct ProxyShapeHasher : public ShapeBaseHasher {
   static bool match(const WeakHeapPtr<ProxyShape*>& key, const Lookup& lookup) {
     const ProxyShape* shape = key.unbarrieredGet();
     return ShapeBaseHasher::match(shape, lookup);
   }
 };
 using ProxyShapeSet =
-    WeakCache<JS::GCHashSet<WeakHeapPtr<ProxyShape*>, ProxyShapeHasher,
-                            SystemAllocPolicy>>;
+    JS::WeakCache<JS::GCHashSet<WeakHeapPtr<ProxyShape*>, ProxyShapeHasher,
+                                SystemAllocPolicy>>;
 
 // Hash policy for the per-zone wasmGCShapes set storing shapes for Wasm GC
 // objects in the zone.
 struct WasmGCShapeHasher : public ShapeBaseHasher {
   struct Lookup : public ShapeBaseHasher::Lookup {
     const wasm::RecGroup* recGroup;
 
     Lookup(const JSClass* clasp, JS::Realm* realm, const TaggedProto& proto,
@@ -195,18 +195,18 @@ struct WasmGCShapeHasher : public ShapeB
   static bool match(const WeakHeapPtr<WasmGCShape*>& key,
                     const Lookup& lookup) {
     const WasmGCShape* shape = key.unbarrieredGet();
     return ShapeBaseHasher::match(shape, lookup) &&
            shape->recGroup() == lookup.recGroup;
   }
 };
 using WasmGCShapeSet =
-    WeakCache<JS::GCHashSet<WeakHeapPtr<WasmGCShape*>, WasmGCShapeHasher,
-                            SystemAllocPolicy>>;
+    JS::WeakCache<JS::GCHashSet<WeakHeapPtr<WasmGCShape*>, WasmGCShapeHasher,
+                                SystemAllocPolicy>>;
 
 struct ShapeZone {
   // Set of all base shapes in the Zone.
   BaseShapeSet baseShapes;
 
   // Set used to look up a shared property map based on the first property's
   // PropertyKey and PropertyInfo.
   InitialPropMapSet initialPropMaps;
diff --git a/js/src/wasm/WasmJS.cpp b/js/src/wasm/WasmJS.cpp
--- a/js/src/wasm/WasmJS.cpp
+++ b/js/src/wasm/WasmJS.cpp
@@ -1629,18 +1629,18 @@ bool WasmInstanceObject::isNewborn() con
 
 // WeakScopeMap maps from function index to js::Scope. This maps is weak
 // to avoid holding scope objects alive. The scopes are normally created
 // during debugging.
 //
 // This is defined here in order to avoid recursive dependency between
 // WasmJS.h and Scope.h.
 using WasmFunctionScopeMap =
-    WeakCache<GCHashMap<uint32_t, WeakHeapPtr<WasmFunctionScope*>,
-                        DefaultHasher<uint32_t>, CellAllocPolicy>>;
+    JS::WeakCache<GCHashMap<uint32_t, WeakHeapPtr<WasmFunctionScope*>,
+                            DefaultHasher<uint32_t>, CellAllocPolicy>>;
 class WasmInstanceObject::UnspecifiedScopeMap {
  public:
   WasmFunctionScopeMap& asWasmFunctionScopeMap() {
     return *(WasmFunctionScopeMap*)this;
   }
 };
 
 /* static */
diff --git a/js/src/wasm/WasmJS.h b/js/src/wasm/WasmJS.h
--- a/js/src/wasm/WasmJS.h
+++ b/js/src/wasm/WasmJS.h
@@ -20,17 +20,17 @@
 #define wasm_js_h
 
 #include "mozilla/HashTable.h"  // DefaultHasher
 #include "mozilla/Maybe.h"      // mozilla::Maybe
 
 #include <stdint.h>  // int32_t, int64_t, uint32_t
 
 #include "gc/Barrier.h"        // HeapPtr
-#include "gc/SweepingAPI.h"    // WeakCache
+#include "gc/SweepingAPI.h"    // JS::WeakCache
 #include "gc/ZoneAllocator.h"  // ZoneAllocPolicy
 #include "js/AllocPolicy.h"    // SystemAllocPolicy
 #include "js/Class.h"          // JSClassOps, ClassSpec
 #include "js/GCHashTable.h"    // GCHashMap, GCHashSet
 #include "js/GCVector.h"       // GCVector
 #include "js/PropertySpec.h"   // JSPropertySpec, JSFunctionSpec
 #include "js/RootingAPI.h"     // StableCellHasher
 #include "js/TypeDecls.h"  // HandleValue, HandleObject, MutableHandleObject, MutableHandleFunction
@@ -281,20 +281,19 @@ class WasmMemoryObject : public NativeOb
   static bool typeImpl(JSContext* cx, const CallArgs& args);
   static bool type(JSContext* cx, unsigned argc, Value* vp);
   static bool growImpl(JSContext* cx, const CallArgs& args);
   static bool grow(JSContext* cx, unsigned argc, Value* vp);
   static bool discardImpl(JSContext* cx, const CallArgs& args);
   static bool discard(JSContext* cx, unsigned argc, Value* vp);
   static uint64_t growShared(Handle<WasmMemoryObject*> memory, uint64_t delta);
 
-  using InstanceSet =
-      WeakCache<GCHashSet<WeakHeapPtr<WasmInstanceObject*>,
-                          StableCellHasher<WeakHeapPtr<WasmInstanceObject*>>,
-                          CellAllocPolicy>>;
+  using InstanceSet = JS::WeakCache<GCHashSet<
+      WeakHeapPtr<WasmInstanceObject*>,
+      StableCellHasher<WeakHeapPtr<WasmInstanceObject*>>, CellAllocPolicy>>;
   bool hasObservers() const;
   InstanceSet& observers() const;
   InstanceSet* getOrCreateObservers(JSContext* cx);
 
  public:
   static const unsigned RESERVED_SLOTS = 3;
   static const JSClass class_;
   static const JSClass& protoClass_;
diff --git a/js/src/wasm/WasmTable.h b/js/src/wasm/WasmTable.h
--- a/js/src/wasm/WasmTable.h
+++ b/js/src/wasm/WasmTable.h
@@ -32,20 +32,19 @@ namespace wasm {
 // A table of FuncRef holds FunctionTableElems, which are (code*,instance*)
 // pairs, where the instance must be traced.
 //
 // A table of AnyRef holds pointers, which must be traced.
 
 using TableAnyRefVector = GCVector<HeapPtr<AnyRef>, 0, SystemAllocPolicy>;
 
 class Table : public ShareableBase<Table> {
-  using InstanceSet =
-      WeakCache<GCHashSet<WeakHeapPtr<WasmInstanceObject*>,
-                          StableCellHasher<WeakHeapPtr<WasmInstanceObject*>>,
-                          SystemAllocPolicy>>;
+  using InstanceSet = JS::WeakCache<GCHashSet<
+      WeakHeapPtr<WasmInstanceObject*>,
+      StableCellHasher<WeakHeapPtr<WasmInstanceObject*>>, SystemAllocPolicy>>;
   using FuncRefVector = Vector<FunctionTableElem, 0, SystemAllocPolicy>;
 
   WeakHeapPtr<WasmTableObject*> maybeObject_;
   InstanceSet observers_;
   FuncRefVector functions_;    // either functions_ has data
   TableAnyRefVector objects_;  // or objects_, but not both
   const RefType elemType_;
   const bool isAsmJS_;

