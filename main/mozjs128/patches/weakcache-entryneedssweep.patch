Roll back some more code to previous version like it was in 115.
Trying to use needsSweep fails when Heap<T> is involved as it does not
implement the method. This is already done for sets, so also do it for maps.

This is fundamentally incompatible with unique ptr values as those do not
have a valid copy constructor. Therefore, nuke the affected test.

-- q66

--- a/js/public/GCHashTable.h
+++ b/js/public/GCHashTable.h
@@ -451,9 +451,15 @@ class WeakCache<
  private:
   using Entry = typename Map::Entry;
 
-  static bool entryNeedsSweep(JSTracer* barrierTracer, const Entry& entry) {
-    return MapEntryGCPolicy::needsSweep(barrierTracer, &entry.key(),
-                                        &entry.value());
+  static bool entryNeedsSweep(JSTracer* barrierTracer, const Entry& prior) {
+    Key key(prior.key());
+    Value value(prior.value());
+    bool needsSweep = !MapEntryGCPolicy::traceWeak(barrierTracer, &key, &value);
+    MOZ_ASSERT_IF(!needsSweep,
+                  prior.key() == key);  // We shouldn't update here.
+    MOZ_ASSERT_IF(!needsSweep,
+                  prior.value() == value);  // We shouldn't update here.
+    return needsSweep;
   }
 
  public:
--- a/js/src/jsapi-tests/testGCWeakCache.cpp
+++ b/js/src/jsapi-tests/testGCWeakCache.cpp
@@ -92,39 +92,6 @@ BEGIN_TEST(testWeakCacheMap) {
 }
 END_TEST(testWeakCacheMap)
 
-BEGIN_TEST(testWeakCacheMapWithUniquePtr) {
-  JS::RootedObject tenured1(cx, JS_NewPlainObject(cx));
-  JS::RootedObject tenured2(cx, JS_NewPlainObject(cx));
-  JS_GC(cx);
-  JS::RootedObject nursery1(cx, JS_NewPlainObject(cx));
-  JS::RootedObject nursery2(cx, JS_NewPlainObject(cx));
-
-  using ObjectMap = js::GCHashMap<HeapPtr<JSObject*>, UniquePtr<uint32_t>,
-                                  js::StableCellHasher<HeapPtr<JSObject*>>>;
-  using Cache = JS::WeakCache<ObjectMap>;
-  Cache cache(JS::GetObjectZone(tenured1), cx);
-
-  cache.put(tenured1, MakeUnique<uint32_t>(1));
-  cache.put(tenured2, MakeUnique<uint32_t>(2));
-  cache.put(nursery1, MakeUnique<uint32_t>(3));
-  cache.put(nursery2, MakeUnique<uint32_t>(4));
-
-  JS_GC(cx);
-  CHECK(cache.has(tenured1));
-  CHECK(cache.has(tenured2));
-  CHECK(cache.has(nursery1));
-  CHECK(cache.has(nursery2));
-
-  tenured2 = nursery2 = nullptr;
-  JS_GC(cx);
-  CHECK(cache.has(tenured1));
-  CHECK(cache.has(nursery1));
-  CHECK(cache.count() == 2);
-
-  return true;
-}
-END_TEST(testWeakCacheMapWithUniquePtr)
-
 // Exercise WeakCache<GCVector>.
 BEGIN_TEST(testWeakCacheGCVector) {
   // Create two objects tenured and two in the nursery. If zeal is on,
