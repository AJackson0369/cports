From 40b8dd9dd648151a7191f8d9069b38a56f236bec Mon Sep 17 00:00:00 2001
From: Daniel Kolesa <dkolesa@igalia.com>
Date: Thu, 9 Dec 2021 18:55:11 +0100
Subject: [PATCH] net: port to libsoup3

---
 doc/grilo/grilo-sections.txt |   1 -
 libs/net/grl-net-mock.c      |  14 ++--
 libs/net/grl-net-wc.c        | 148 ++++++++++++-----------------------
 libs/net/grl-net-wc.h        |   5 +-
 meson.build                  |   2 +-
 tests/autoptr.c              |   2 +-
 tests/lib-net.c              |  27 +++----
 7 files changed, 71 insertions(+), 128 deletions(-)

diff --git a/doc/grilo/grilo-sections.txt b/doc/grilo/grilo-sections.txt
index 59e12d9..da2ed19 100644
--- a/doc/grilo/grilo-sections.txt
+++ b/doc/grilo/grilo-sections.txt
@@ -739,7 +739,6 @@ grl_net_wc_request_with_headers_hash_async
 grl_net_wc_set_cache
 grl_net_wc_set_cache_size
 grl_net_wc_set_log_level
-grl_net_wc_set_throttling
 <SUBSECTION Standard>
 GRL_IS_NET_WC
 GRL_IS_NET_WC_CLASS
diff --git a/libs/net/grl-net-mock.c b/libs/net/grl-net-mock.c
index 0aebceb..bc39f48 100644
--- a/libs/net/grl-net-mock.c
+++ b/libs/net/grl-net-mock.c
@@ -14,7 +14,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public
+ * You should have received a copsoupy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  * 02110-1301 USA
@@ -61,19 +61,21 @@ get_url_mocked (GrlNetWc *self,
   char *new_url;
 
   if (ignored_parameters) {
-    SoupURI *uri = soup_uri_new (url);
-    const char *query = soup_uri_get_query (uri);
+    GUri *uri = g_uri_parse (url, SOUP_HTTP_URI_FLAGS, NULL);
+    const char *query = g_uri_get_query (uri);
     if (query) {
       char *new_query = g_regex_replace (ignored_parameters,
                                          query, -1, 0,
                                          "", 0, NULL);
-      soup_uri_set_query (uri, *new_query ? new_query : NULL);
-      new_url = soup_uri_to_string (uri, FALSE);
-      soup_uri_free (uri);
+      GUri *nuri = soup_uri_copy (uri, SOUP_URI_QUERY,
+                                  *new_query ? new_query : NULL, SOUP_URI_NONE);
+      new_url = g_uri_to_string_partial (nuri, G_URI_HIDE_PASSWORD);
+      g_uri_unref (nuri);
       g_free (new_query);
     } else {
       new_url = g_strdup (url);
     }
+    g_uri_unref (uri);
   } else {
     new_url = g_strdup (url);
   }
diff --git a/libs/net/grl-net-wc.c b/libs/net/grl-net-wc.c
index 2d68f93..17eed3d 100644
--- a/libs/net/grl-net-wc.c
+++ b/libs/net/grl-net-wc.c
@@ -39,13 +39,10 @@
 #include "config.h"
 #endif
 
-#define LIBSOUP_USE_UNSTABLE_REQUEST_API
-
 #include <errno.h>
 #include <glib/gi18n-lib.h>
 #include <glib/gstdio.h>
 #include <libsoup/soup-cache.h>
-#include <libsoup/soup-request-http.h>
 #include <libsoup/soup.h>
 #include <string.h>
 
@@ -68,7 +65,7 @@ enum {
 };
 
 struct request_res {
-  SoupRequest *request;
+  SoupMessage *message;
   gchar *buffer;
   gsize length;
   gsize offset;
@@ -107,6 +104,8 @@ static void grl_net_wc_get_property (GObject *object,
                                      guint propid,
                                      GValue *value,
                                      GParamSpec *pspec);
+static void grl_net_wc_set_throttling (GrlNetWc *self,
+                                       guint throttling);
 
 static void
 grl_net_wc_class_init (GrlNetWcClass *klass)
@@ -145,6 +144,7 @@ grl_net_wc_class_init (GrlNetWcClass *klass)
                                                       "Time to throttle connections",
                                                       0, G_MAXUINT, 0,
                                                       G_PARAM_READWRITE |
+                                                      G_PARAM_CONSTRUCT_ONLY |
                                                       G_PARAM_STATIC_STRINGS));
   /**
    * GrlNetWc::cache:
@@ -195,25 +195,10 @@ free_op_res (void *op)
 {
   struct request_res *rr = op;
 
-  g_object_unref (rr->request);
+  g_object_unref (rr->message);
   g_slice_free (struct request_res, rr);
 }
 
-/*
- * use-thread-context is available for libsoup-2.4 >= 2.39.0
- * We check in run-time if it's available
- */
-static void
-set_thread_context (GrlNetWc *self)
-{
-    GrlNetWcPrivate *priv = self->priv;
-    GObjectClass *klass = G_OBJECT_GET_CLASS (priv->session);
-    GParamSpec *spec = g_object_class_find_property (klass,
-                                                     "use-thread-context");
-    if (spec)
-      g_object_set (priv->session, "use-thread-context", TRUE, NULL);
-}
-
 static void
 init_dump_directory (void)
 {
@@ -313,11 +298,9 @@ grl_net_wc_init (GrlNetWc *wc)
 
   wc->priv = grl_net_wc_get_instance_private (wc);
 
-  wc->priv->session = soup_session_async_new ();
-  g_object_set (G_OBJECT (wc->priv->session), "ssl-use-system-ca-file", TRUE, NULL);
+  wc->priv->session = NULL;
   wc->priv->pending = g_queue_new ();
 
-  set_thread_context (wc);
   init_mock_requester (wc);
   init_requester (wc);
 }
@@ -427,58 +410,34 @@ request_clos_destroy (gpointer data)
 static void
 parse_error (guint status,
              const gchar *reason,
-             const gchar *response,
              GSimpleAsyncResult *result)
 {
-  if (!response || *response == '\0')
-    response = reason;
-
   switch (status) {
-  case SOUP_STATUS_CANT_RESOLVE:
-  case SOUP_STATUS_CANT_CONNECT:
-  case SOUP_STATUS_SSL_FAILED:
-  case SOUP_STATUS_IO_ERROR:
-    g_simple_async_result_set_error (result, GRL_NET_WC_ERROR,
-                                     GRL_NET_WC_ERROR_NETWORK_ERROR,
-                                     _("Cannot connect to the server"));
-    return;
-  case SOUP_STATUS_CANT_RESOLVE_PROXY:
-  case SOUP_STATUS_CANT_CONNECT_PROXY:
-    g_simple_async_result_set_error (result, G_IO_ERROR,
-                                     G_IO_ERROR_PROXY_FAILED,
-                                     _("Cannot connect to the proxy server"));
-    return;
   case SOUP_STATUS_INTERNAL_SERVER_ERROR: /* 500 */
-  case SOUP_STATUS_MALFORMED:
   case SOUP_STATUS_BAD_REQUEST: /* 400 */
     g_simple_async_result_set_error (result, GRL_NET_WC_ERROR,
                                      GRL_NET_WC_ERROR_PROTOCOL_ERROR,
                                      _("Invalid request URI or header: %s"),
-                                     response);
+                                     reason);
     return;
   case SOUP_STATUS_UNAUTHORIZED: /* 401 */
   case SOUP_STATUS_FORBIDDEN: /* 403 */
     g_simple_async_result_set_error (result, GRL_NET_WC_ERROR,
                                      GRL_NET_WC_ERROR_AUTHENTICATION_REQUIRED,
-                                     _("Authentication required: %s"), response);
+                                     _("Authentication required: %s"), reason);
     return;
   case SOUP_STATUS_NOT_FOUND: /* 404 */
     g_simple_async_result_set_error (result, GRL_NET_WC_ERROR,
                                      GRL_NET_WC_ERROR_NOT_FOUND,
                                      _("The requested resource was not found: %s"),
-                                     response);
+                                     reason);
     return;
   case SOUP_STATUS_CONFLICT: /* 409 */
   case SOUP_STATUS_PRECONDITION_FAILED: /* 412 */
     g_simple_async_result_set_error (result, GRL_NET_WC_ERROR,
                                      GRL_NET_WC_ERROR_CONFLICT,
                                      _("The entry has been modified since it was downloaded: %s"),
-                                     response);
-    return;
-  case SOUP_STATUS_CANCELLED:
-    g_simple_async_result_set_error (result, G_IO_ERROR,
-                                     G_IO_ERROR_CANCELLED,
-                                     _("Operation was cancelled"));
+                                     reason);
     return;
   default:
     GRL_DEBUG ("Unhandled status: %s", soup_status_get_phrase (status));
@@ -501,14 +460,14 @@ build_request_filename (const char *uri)
 }
 
 static void
-dump_data (SoupURI *uri,
+dump_data (GUri *uri,
            const char *buffer,
            const gsize length)
 {
   if (!capture_dir)
     return;
 
-  char *uri_string = soup_uri_to_string (uri, FALSE);
+  char *uri_string = g_uri_to_string_partial (uri, G_URI_HIDE_PASSWORD);
 
   /* Write request content to file in capture directory. */
   char *request_filename = build_request_filename (uri_string);
@@ -605,15 +564,10 @@ read_async_cb (GObject *source,
   }
 
   {
-    SoupMessage *msg =
-      soup_request_http_get_message (SOUP_REQUEST_HTTP (rr->request));
-
-    if (msg && msg->status_code != SOUP_STATUS_OK) {
-        parse_error (msg->status_code,
-                     msg->reason_phrase,
-                     msg->response_body->data,
+    if (rr->message && soup_message_get_status (rr->message) != SOUP_STATUS_OK) {
+        parse_error (soup_message_get_status (rr->message),
+                     soup_message_get_reason_phrase (rr->message),
                      G_SIMPLE_ASYNC_RESULT (user_data));
-        g_object_unref (msg);
     }
   }
 
@@ -626,11 +580,15 @@ reply_cb (GObject *source,
           GAsyncResult *res,
           gpointer user_data)
 {
+  SoupSession *session = SOUP_SESSION (source);
+  SoupMessage *message = soup_session_get_async_result_message (session, res);
+  SoupMessageHeaders *response_hdrs = soup_message_get_response_headers (message);
   GSimpleAsyncResult *result = G_SIMPLE_ASYNC_RESULT (user_data);
   struct request_res *rr = g_simple_async_result_get_op_res_gpointer (result);
+  goffset content_length;
 
   GError *error = NULL;
-  GInputStream *in = soup_request_send_finish (rr->request, res, &error);
+  GInputStream *in = soup_session_send_finish (session, res, &error);
 
   if (error) {
     if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
@@ -647,7 +605,7 @@ reply_cb (GObject *source,
     return;
   }
 
-  rr->length = soup_request_get_content_length (rr->request) + 1;
+  rr->length = soup_message_headers_get_content_length (response_hdrs) + 1;
   if (rr->length == 1)
     rr->length = 50 * 1024;
 
@@ -670,22 +628,22 @@ get_url_now (GrlNetWc *self,
              GCancellable *cancellable)
 {
   GrlNetWcPrivate *priv = self->priv;
-  SoupURI *uri;
+  GUri *uri;
   struct request_res *rr = g_slice_new0 (struct request_res);
 
   g_simple_async_result_set_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (result),
                                              rr,
                                              NULL);
 
-  uri = soup_uri_new (url);
+  uri = g_uri_parse (url, SOUP_HTTP_URI_FLAGS, NULL);
   if (uri) {
-    rr->request = soup_session_request_uri (priv->session, uri, NULL);
-    soup_uri_free (uri);
+    rr->message = soup_message_new_from_uri (SOUP_METHOD_GET, uri);
+    g_uri_unref (uri);
   } else {
-    rr->request = NULL;
+    rr->message = NULL;
   }
 
-  if (!rr->request) {
+  if (!rr->message) {
     g_simple_async_result_set_error (G_SIMPLE_ASYNC_RESULT (result),
                                      G_IO_ERROR,
                                      G_IO_ERROR_INVALID_ARGUMENT,
@@ -697,22 +655,17 @@ get_url_now (GrlNetWc *self,
   }
 
   if (headers != NULL) {
-    SoupMessage *message;
     GHashTableIter iter;
     const char *key, *value;
 
-    message = soup_request_http_get_message (SOUP_REQUEST_HTTP (rr->request));
-
-    if (message) {
-      g_hash_table_iter_init (&iter, headers);
-      while (g_hash_table_iter_next (&iter, (gpointer *) &key, (gpointer *)&value)) {
-        soup_message_headers_append (message->request_headers, key, value);
-      }
-      g_object_unref (message);
+    g_hash_table_iter_init (&iter, headers);
+    while (g_hash_table_iter_next (&iter, (gpointer *) &key, (gpointer *)&value)) {
+      soup_message_headers_append (soup_message_get_request_headers (rr->message), key, value);
     }
   }
 
-  soup_request_send_async (rr->request, cancellable, reply_cb, result);
+  soup_session_send_async (priv->session, rr->message, G_PRIORITY_DEFAULT,
+                           cancellable, reply_cb, result);
 }
 
 static gboolean
@@ -794,7 +747,7 @@ get_content (GrlNetWc *self,
   if (is_mocked ()) {
     get_content_mocked (self, op, &(priv->previous_data), length);
   } else {
-    dump_data (soup_request_get_uri (rr->request),
+    dump_data (soup_message_get_uri (rr->message),
                rr->buffer,
                rr->offset);
     priv->previous_data = rr->buffer;
@@ -814,16 +767,21 @@ get_content (GrlNetWc *self,
 
 /**
  * grl_net_wc_new:
+ * @throttling: the number of seconds to wait between requests
  *
  * Creates a new #GrlNetWc.
  *
+ * Setting %throttling to another value than 0 will make the #GrlNetWc queue
+ * all the requests and dispatch them with a pause between them of this value.
+ *
  * Returns: a new allocated instance of #GrlNetWc. Do g_object_unref() after
  * use it.
  */
 GrlNetWc *
-grl_net_wc_new ()
+grl_net_wc_new (guint throttling)
 {
   return g_object_new (GRL_TYPE_NET_WC,
+                       "throttling", throttling,
                        NULL);
 }
 
@@ -1015,37 +973,27 @@ grl_net_wc_set_log_level (GrlNetWc *self,
 
   soup_session_remove_feature_by_type (self->priv->session, SOUP_TYPE_LOGGER);
 
-  logger = soup_logger_new ((SoupLoggerLogLevel) log_level, -1);
+  logger = soup_logger_new ((SoupLoggerLogLevel) log_level);
   soup_session_add_feature (self->priv->session, SOUP_SESSION_FEATURE (logger));
   g_object_unref (logger);
 
   self->priv->log_level = (SoupLoggerLogLevel) log_level;
 }
 
-/**
- * grl_net_wc_set_throttling:
- * @self: a #GrlNetWc instance
- * @throttling: the number of seconds to wait between requests
- *
- * Setting this property, the #GrlNetWc will queue all the requests and
- * will dispatch them with a pause between them of this value.
- */
-void
+static void
 grl_net_wc_set_throttling (GrlNetWc *self,
                            guint throttling)
 {
   g_return_if_fail (GRL_IS_NET_WC (self));
 
-  if (throttling > 0) {
-    /* max conns per host = 1 */
-    g_object_set (self->priv->session,
-                  SOUP_SESSION_MAX_CONNS_PER_HOST, 1, NULL);
-  } else {
-    /* default value */
-    g_object_set (self->priv->session,
-                  SOUP_SESSION_MAX_CONNS_PER_HOST, 2, NULL);
-  }
+  /* default value */
+  int maxconns = 2;
+
+  if (throttling > 0)
+    maxconns = 1;
 
+  self->priv->session = soup_session_new_with_options ("max-conns-per-host",
+                                                       maxconns, NULL);
   self->priv->throttling = throttling;
 }
 
diff --git a/libs/net/grl-net-wc.h b/libs/net/grl-net-wc.h
index e8da707..dd9fc2b 100644
--- a/libs/net/grl-net-wc.h
+++ b/libs/net/grl-net-wc.h
@@ -118,7 +118,7 @@ GType grl_net_wc_get_type (void) G_GNUC_CONST;
 
 GQuark grl_net_wc_error_quark (void) G_GNUC_CONST;
 
-GrlNetWc *grl_net_wc_new (void);
+GrlNetWc *grl_net_wc_new (guint throttling);
 
 void grl_net_wc_request_async (GrlNetWc *self,
 			       const char *uri,
@@ -149,9 +149,6 @@ gboolean grl_net_wc_request_finish (GrlNetWc *self,
 void grl_net_wc_set_log_level (GrlNetWc *self,
 			       guint log_level);
 
-void grl_net_wc_set_throttling (GrlNetWc *self,
-				guint throttling);
-
 void grl_net_wc_set_cache (GrlNetWc *self,
                            gboolean use_cache);
 
diff --git a/meson.build b/meson.build
index 263ed81..5d0ae8a 100644
--- a/meson.build
+++ b/meson.build
@@ -48,7 +48,7 @@ libxml_dep = dependency('libxml-2.0', required: true)
 
 enable_grlnet = get_option('enable-grl-net')
 if enable_grlnet
-    libsoup_dep = dependency('libsoup-2.4', version: '>= 2.41.3', required: true)
+    libsoup_dep = dependency('libsoup-3.0', version: '>= 3.0.2', required: true)
 endif
 
 enable_grlpls = get_option('enable-grl-pls')
diff --git a/tests/autoptr.c b/tests/autoptr.c
index 51080f7..8450325 100644
--- a/tests/autoptr.c
+++ b/tests/autoptr.c
@@ -32,7 +32,7 @@
 static void
 test_grl_net_wc (void)
 {
-  g_autoptr (GrlNetWc) val = grl_net_wc_new ();
+  g_autoptr (GrlNetWc) val = grl_net_wc_new (0);
   g_assert_nonnull (val);
 }
 #endif /* HAVE_GRLNET */
diff --git a/tests/lib-net.c b/tests/lib-net.c
index 2857310..acff064 100644
--- a/tests/lib-net.c
+++ b/tests/lib-net.c
@@ -82,16 +82,15 @@ timeout (gpointer user_data)
 
 static void
 soup_server_throttling_cb (SoupServer *server,
-                           SoupMessage *message,
+                           SoupServerMessage *message,
                            const char *path,
                            GHashTable *query,
-                           SoupClientContext *client,
                            gpointer user_data)
 {
   gchar *response = g_strdup_printf ("%" G_GINT64_FORMAT, g_get_monotonic_time());
 
-  soup_message_set_response (message, "text/plain", SOUP_MEMORY_TAKE, response, strlen(response));
-  soup_message_set_status (message, SOUP_STATUS_OK);
+  soup_server_message_set_response (message, "text/plain", SOUP_MEMORY_TAKE, response, strlen(response));
+  soup_server_message_set_status (message, SOUP_STATUS_OK, NULL);
 }
 
 static void
@@ -163,12 +162,11 @@ test_net_wc_small_throttling (Fixture *f,
 
   uris = soup_server_get_uris (f->server);
   g_assert_nonnull (uris);
-  request = soup_uri_to_string (uris->data, FALSE);
-  g_slist_free_full (uris, (GDestroyNotify) soup_uri_free);
+  request = g_uri_to_string_partial (uris->data, G_URI_HIDE_PASSWORD);
+  g_slist_free_full (uris, (GDestroyNotify) g_uri_unref);
   g_assert_nonnull (request);
 
-  wc = grl_net_wc_new ();
-  grl_net_wc_set_throttling (wc, DELAY);
+  wc = grl_net_wc_new (DELAY);
 
   /* The throttling is considered between requests which means that the first
    * request is done as fast as possible */
@@ -203,12 +201,11 @@ test_net_wc_big_throttling (Fixture *f,
 
   uris = soup_server_get_uris (f->server);
   g_assert_nonnull (uris);
-  request = soup_uri_to_string (uris->data, FALSE);
-  g_slist_free_full (uris, (GDestroyNotify) soup_uri_free);
+  request = g_uri_to_string_partial (uris->data, G_URI_HIDE_PASSWORD);
+  g_slist_free_full (uris, (GDestroyNotify) g_uri_unref);
   g_assert_nonnull (request);
 
-  wc = grl_net_wc_new ();
-  grl_net_wc_set_throttling (wc, BIG_DELAY);
+  wc = grl_net_wc_new (BIG_DELAY);
 
   /* The throttling is considered between requests which means that the first
    * request is done as fast as possible */
@@ -245,13 +242,13 @@ test_net_wc_no_throttling_stress (Fixture *f,
 
   uris = soup_server_get_uris (f->server);
   g_assert_nonnull (uris);
-  request = soup_uri_to_string (uris->data, FALSE);
-  g_slist_free_full (uris, (GDestroyNotify) soup_uri_free);
+  request = g_uri_to_string_partial (uris->data, G_URI_HIDE_PASSWORD);
+  g_slist_free_full (uris, (GDestroyNotify) g_uri_unref);
   g_assert_nonnull (request);
 
   /* Under the same grl-net-wc, create NUM_STRESS_TEST async operations to our
    * test SoupServer to verify if any regression can be seen */
-  wc = grl_net_wc_new ();
+  wc = grl_net_wc_new (0);
   for (i = 0; i < NUM_STRESS_TEST; i++) {
       ThrottlingOperation *op;
 
-- 
GitLab

commit 049d58053a69b57cf26c7a617a0acb52a4eed5a0
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Sat Feb 12 01:19:01 2022 +0100

    add forgotten soup3 bit

diff --git a/libs/net/meson.build b/libs/net/meson.build
index c366adf..dd3279d 100644
--- a/libs/net/meson.build
+++ b/libs/net/meson.build
@@ -67,7 +67,7 @@ if enable_gir
         identifier_prefix: 'GrlNet',
         symbol_prefix: 'grl_net',
         dependencies: [ gobject_dep, gio_dep, libsoup_dep ],
-        includes: [ 'GObject-2.0', 'Gio-2.0', 'Soup-2.4' ],
+        includes: [ 'GObject-2.0', 'Gio-2.0', 'Soup-3.0' ],
         include_directories: libs_inc,
         install: true,
         extra_args: [ '--c-include=net/grl-net.h' ])
