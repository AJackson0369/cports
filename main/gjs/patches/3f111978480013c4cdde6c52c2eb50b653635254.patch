From 3f111978480013c4cdde6c52c2eb50b653635254 Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Sat, 27 Jul 2024 12:55:38 -0700
Subject: [PATCH] js: Heap can no longer be stored in WeakCache

We used to be able to store JS::Heap<T> in JS::WeakCache, but that is no
longer possible because JS::GCPolicy<JS::Heap> does not implement
needsSweep().

Add a class Gjs::WeakPtr<T> that behaves the same as JS::Heap<T> but has
the appropriately defined GCPolicy to be able to be stored in WeakCache.
---
 gjs/context-private.h |  4 ++--
 gjs/jsapi-util-root.h | 34 ++++++++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+), 2 deletions(-)

diff --git a/gjs/context-private.h b/gjs/context-private.h
index 76bcb21fd..abf1489e5 100644
--- a/gjs/context-private.h
+++ b/gjs/context-private.h
@@ -52,10 +52,10 @@ using JobQueueStorage =
 using ObjectInitList =
     JS::GCVector<JS::Heap<JSObject*>, 0, js::SystemAllocPolicy>;
 using FundamentalTable =
-    JS::GCHashMap<void*, JS::Heap<JSObject*>, js::DefaultHasher<void*>,
+    JS::GCHashMap<void*, Gjs::WeakPtr<JSObject*>, js::DefaultHasher<void*>,
                   js::SystemAllocPolicy>;
 using GTypeTable =
-    JS::GCHashMap<GType, JS::Heap<JSObject*>, js::DefaultHasher<GType>,
+    JS::GCHashMap<GType, Gjs::WeakPtr<JSObject*>, js::DefaultHasher<GType>,
                   js::SystemAllocPolicy>;
 using FunctionVector = JS::GCVector<JSFunction*, 0, js::SystemAllocPolicy>;
 
diff --git a/gjs/jsapi-util-root.h b/gjs/jsapi-util-root.h
index 0676dabab..e2fdda12e 100644
--- a/gjs/jsapi-util-root.h
+++ b/gjs/jsapi-util-root.h
@@ -23,6 +23,8 @@
 
 #include "util/log.h"
 
+namespace JS { template <typename T> struct GCPolicy; }
+
 /* jsapi-util-root.h - Utilities for dealing with the lifetime and ownership of
  * JS Objects and other things that can be collected by the garbage collector
  * (collectively called "GC things.")
@@ -221,4 +223,36 @@ class GjsMaybeOwned {
     [[nodiscard]] bool rooted() const { return m_root != nullptr; }
 };
 
+namespace Gjs {
+
+template <typename T>
+class WeakPtr : public JS::Heap<T> {
+ public:
+    using JS::Heap<T>::Heap;
+    using JS::Heap<T>::operator=;
+};
+
+}  // namespace Gjs
+
+namespace JS {
+
+template <typename T>
+struct GCPolicy<Gjs::WeakPtr<T>> {
+    static void trace(JSTracer* trc, Gjs::WeakPtr<T>* thingp,
+                      const char* name) {
+        return JS::TraceEdge(trc, thingp, name);
+    }
+
+    static bool traceWeak(JSTracer* trc, Gjs::WeakPtr<T>* thingp) {
+        return js::gc::TraceWeakEdge(trc, thingp);
+    }
+
+    static bool needsSweep(JSTracer* trc, const Gjs::WeakPtr<T>* thingp) {
+        Gjs::WeakPtr<T> thing{*thingp};
+        return !js::gc::TraceWeakEdge(trc, &thing);
+    }
+};
+
+}  // namespace JS
+
 #endif  // GJS_JSAPI_UTIL_ROOT_H_
-- 
GitLab

