From ab3c3c2298e913f27a88a910d031e44643c849dd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timo=20Ter=C3=A4s?= <timo.teras@iki.fi>
Date: Mon, 11 Sep 2023 13:09:58 +0300
Subject: [PATCH 1/2] adb: implement ADB_BLOCK_EXT flavor for large files

---
 src/adb.c          | 46 +++++++++++++++++++++-------------------------
 src/adb.h          | 38 +++++++++++++++++++++++++++++---------
 src/adb_walk_adb.c |  6 +++---
 src/extract_v3.c   |  2 +-
 4 files changed, 54 insertions(+), 38 deletions(-)

diff --git a/src/adb.c b/src/adb.c
index 3f221878..4bc89d43 100644
--- a/src/adb.c
+++ b/src/adb.c
@@ -18,11 +18,13 @@ static char padding_zeroes[ADB_BLOCK_ALIGNMENT] = {0};
 /* Block enumeration */
 static inline struct adb_block *adb_block_validate(struct adb_block *blk, apk_blob_t b)
 {
-	size_t pos = (char *)blk - b.ptr;
+	size_t pos = (char *)blk - b.ptr, len = (size_t)(b.len - pos);
 	if (pos == b.len) return NULL;
-	if (sizeof(struct adb_block) > b.len - pos) return ERR_PTR(-APKE_ADB_BLOCK);
-	if (adb_block_rawsize(blk) < sizeof(struct adb_block)) return ERR_PTR(-APKE_ADB_BLOCK);
-	if (adb_block_size(blk) > b.len - pos) return ERR_PTR(-APKE_ADB_BLOCK);
+	if (sizeof(uint32_t) > len) return ERR_PTR(-APKE_ADB_BLOCK);
+	size_t hdrlen = adb_block_hdrsize(blk);
+	if (hdrlen > len) return ERR_PTR(-APKE_ADB_BLOCK);
+	if (adb_block_rawsize(blk) < hdrlen) return ERR_PTR(-APKE_ADB_BLOCK);
+	if (adb_block_size(blk) > len) return ERR_PTR(-APKE_ADB_BLOCK);
 	return blk;
 }
 
@@ -94,7 +96,7 @@ static int __adb_m_parse(struct adb *db, apk_blob_t data, struct apk_trust *t,
 		}
 		switch (type) {
 		case ADB_BLOCK_ADB:
-			allowed = BIT(ADB_BLOCK_SIG) | BIT(ADB_BLOCK_DATA) | BIT(ADB_BLOCK_DATAX);
+			allowed = BIT(ADB_BLOCK_SIG) | BIT(ADB_BLOCK_DATA);
 			if (b.len < 16) {
 				r = -APKE_ADB_BLOCK;
 				goto err;
@@ -111,15 +113,12 @@ static int __adb_m_parse(struct adb *db, apk_blob_t data, struct apk_trust *t,
 				trusted = 1;
 			break;
 		case ADB_BLOCK_DATA:
-			allowed = BIT(ADB_BLOCK_DATA) | BIT(ADB_BLOCK_DATAX);
+			allowed = BIT(ADB_BLOCK_DATA);
 			if (!trusted) {
 				r = -APKE_SIGNATURE_UNTRUSTED;
 				goto err;
 			}
 			break;
-		case ADB_BLOCK_DATAX:
-			r = -APKE_ADB_BLOCK;
-			goto err;
 		}
 		r = cb(db, blk, apk_istream_from_blob(&is, b));
 		if (r < 0) break;
@@ -175,7 +174,6 @@ static int __adb_m_stream(struct adb *db, struct apk_istream *is, uint32_t expec
 	void *sig;
 	int r = 0, trusted = (t && t->allow_untrusted) ? 1 : 0;
 	uint32_t type, allowed = BIT(ADB_BLOCK_ADB);
-	size_t sz;
 
 	if (IS_ERR(is)) return PTR_ERR(is);
 
@@ -193,8 +191,11 @@ static int __adb_m_stream(struct adb *db, struct apk_istream *is, uint32_t expec
 	}
 
 	do {
-		r = apk_istream_read_max(is, &blk, sizeof blk);
-		if (r != sizeof blk) break;
+		size_t hdrsize = sizeof blk;
+		void *hdrptr = apk_istream_peek(is, sizeof(blk.type_size));
+		if (!IS_ERR(hdrptr)) hdrsize = adb_block_hdrsize(hdrptr);
+		r = apk_istream_read_max(is, &blk, hdrsize);
+		if (r != hdrsize) break;
 
 		type = adb_block_type(&blk);
 		if (!(BIT(type) & allowed)) {
@@ -202,10 +203,10 @@ static int __adb_m_stream(struct adb *db, struct apk_istream *is, uint32_t expec
 			break;
 		}
 
-		sz = adb_block_length(&blk);
+		uint64_t sz = adb_block_length(&blk);
 		switch (type) {
 		case ADB_BLOCK_ADB:
-			allowed = BIT(ADB_BLOCK_SIG) | BIT(ADB_BLOCK_DATA) | BIT(ADB_BLOCK_DATAX);
+			allowed = BIT(ADB_BLOCK_SIG) | BIT(ADB_BLOCK_DATA);
 			db->adb.ptr = malloc(sz);
 			db->adb.len = sz;
 			if (db->adb.len < 16) {
@@ -231,15 +232,12 @@ static int __adb_m_stream(struct adb *db, struct apk_istream *is, uint32_t expec
 				trusted = 1;
 			break;
 		case ADB_BLOCK_DATA:
-			allowed = BIT(ADB_BLOCK_DATA) | BIT(ADB_BLOCK_DATAX);
+			allowed = BIT(ADB_BLOCK_DATA);
 			if (!trusted) {
 				r = -APKE_SIGNATURE_UNTRUSTED;
 				goto err;
 			}
 			break;
-		case ADB_BLOCK_DATAX:
-			r = -APKE_ADB_BLOCK;
-			goto err;
 		}
 
 		apk_istream_segment(&seg, is, sz, 0);
@@ -762,7 +760,7 @@ adb_val_t adb_w_adb(struct adb *db, struct adb *valdb)
 	struct adb_block blk = adb_block_init(ADB_BLOCK_ADB, valdb->adb.len);
 	struct iovec vec[] = {
 		{ .iov_base = &bsz, .iov_len = sizeof bsz },
-		{ .iov_base = &blk, .iov_len = sizeof blk },
+		{ .iov_base = &blk, .iov_len = adb_block_hdrsize(&blk) },
 		{ .iov_base = valdb->adb.ptr, .iov_len = valdb->adb.len },
 		{ .iov_base = padding_zeroes, .iov_len = adb_block_padding(&blk) },
 	};
@@ -1089,9 +1087,7 @@ int adb_c_block(struct apk_ostream *os, uint32_t type, apk_blob_t val)
 	size_t padding = adb_block_padding(&blk);
 	int r;
 
-	if (val.len & ~0x3fffffff) return -APKE_ADB_LIMIT;
-
-	r = apk_ostream_write(os, &blk, sizeof blk);
+	r = apk_ostream_write(os, &blk, adb_block_hdrsize(&blk));
 	if (r < 0) return r;
 
 	r = apk_ostream_write(os, val.ptr, val.len);
@@ -1105,7 +1101,7 @@ int adb_c_block(struct apk_ostream *os, uint32_t type, apk_blob_t val)
 	return 0;
 }
 
-int adb_c_block_data(struct apk_ostream *os, apk_blob_t hdr, uint32_t size, struct apk_istream *is)
+int adb_c_block_data(struct apk_ostream *os, apk_blob_t hdr, uint64_t size, struct apk_istream *is)
 {
 	struct adb_block blk = adb_block_init(ADB_BLOCK_DATA, size + hdr.len);
 	size_t padding = adb_block_padding(&blk);
@@ -1114,7 +1110,7 @@ int adb_c_block_data(struct apk_ostream *os, apk_blob_t hdr, uint32_t size, stru
 	if (IS_ERR(os)) return PTR_ERR(os);
 	if (IS_ERR(is)) return apk_ostream_cancel(os, PTR_ERR(is));
 
-	r = apk_ostream_write(os, &blk, sizeof blk);
+	r = apk_ostream_write(os, &blk, adb_block_hdrsize(&blk));
 	if (r < 0) return r;
 
 	r = apk_ostream_write(os, hdr.ptr, hdr.len);
@@ -1133,7 +1129,7 @@ int adb_c_block_data(struct apk_ostream *os, apk_blob_t hdr, uint32_t size, stru
 
 int adb_c_block_copy(struct apk_ostream *os, struct adb_block *b, struct apk_istream *is, struct adb_verify_ctx *vfy)
 {
-	size_t blk_sz = adb_block_length(b);
+	uint64_t blk_sz = adb_block_length(b);
 	size_t padding = adb_block_padding(b);
 	int r;
 
diff --git a/src/adb.h b/src/adb.h
index 86499893..32152ae2 100644
--- a/src/adb.h
+++ b/src/adb.h
@@ -57,21 +57,41 @@ struct adb_file_header {
 #define ADB_BLOCK_ADB		0
 #define ADB_BLOCK_SIG		1
 #define ADB_BLOCK_DATA		2
-#define ADB_BLOCK_DATAX		3
+#define ADB_BLOCK_EXT		3
 
 struct adb_block {
 	uint32_t type_size;
+	uint32_t reserved;
+	uint64_t x_size;
 };
 
-static inline struct adb_block adb_block_init(uint32_t type, uint32_t length) {
-	return (struct adb_block) { .type_size = htole32((type << 30) + sizeof(struct adb_block) + length)};
+static inline struct adb_block adb_block_init(uint32_t type, uint64_t length) {
+	if (length <= 0x3fffffff) {
+		return (struct adb_block) {
+			.type_size = htole32((type << 30) + sizeof(uint32_t) + length),
+		};
+	}
+	return (struct adb_block) {
+		.type_size = htole32((ADB_BLOCK_EXT << 30) + type),
+		.x_size = htole64(sizeof(struct adb_block) + length),
+	};
 }
-static inline uint32_t adb_block_type(struct adb_block *b) { return le32toh((b)->type_size) >> 30; }
-static inline uint32_t adb_block_rawsize(struct adb_block *b) { return le32toh((b)->type_size) & 0x3fffffff; }
-static inline uint32_t adb_block_size(struct adb_block *b) { return ROUND_UP(adb_block_rawsize(b), ADB_BLOCK_ALIGNMENT); }
-static inline uint32_t adb_block_length(struct adb_block *b) { return adb_block_rawsize(b) - sizeof(struct adb_block); }
+static inline uint32_t adb_block_is_ext(struct adb_block *b) {
+	return (le32toh((b)->type_size) >> 30) == ADB_BLOCK_EXT;
+}
+static inline uint32_t adb_block_type(struct adb_block *b) {
+	return adb_block_is_ext(b) ? (le32toh(b->type_size) & 0x3fffffff) : (le32toh(b->type_size) >> 30);
+}
+static inline uint64_t adb_block_rawsize(struct adb_block *b) {
+	return adb_block_is_ext(b) ? le64toh(b->x_size) : (le32toh(b->type_size) & 0x3fffffff);
+}
+static inline uint32_t adb_block_hdrsize(struct adb_block *b) {
+	return adb_block_is_ext(b) ? sizeof *b : sizeof b->type_size;
+}
+static inline uint64_t adb_block_size(struct adb_block *b) { return ROUND_UP(adb_block_rawsize(b), ADB_BLOCK_ALIGNMENT); }
+static inline uint64_t adb_block_length(struct adb_block *b) { return adb_block_rawsize(b) - adb_block_hdrsize(b); }
 static inline uint32_t adb_block_padding(struct adb_block *b) { return adb_block_size(b) - adb_block_rawsize(b); }
-static inline void *adb_block_payload(struct adb_block *b) { return b + 1; }
+static inline void *adb_block_payload(struct adb_block *b) { return (char*)b + adb_block_hdrsize(b); }
 static inline apk_blob_t adb_block_blob(struct adb_block *b) {
 	return APK_BLOB_PTR_LEN(adb_block_payload(b), adb_block_length(b));
 }
@@ -243,7 +263,7 @@ int adb_s_field_by_name(const struct adb_object_schema *, const char *);
 /* Creation */
 int adb_c_header(struct apk_ostream *os, struct adb *db);
 int adb_c_block(struct apk_ostream *os, uint32_t type, apk_blob_t);
-int adb_c_block_data(struct apk_ostream *os, apk_blob_t hdr, uint32_t size, struct apk_istream *is);
+int adb_c_block_data(struct apk_ostream *os, apk_blob_t hdr, uint64_t size, struct apk_istream *is);
 int adb_c_block_copy(struct apk_ostream *os, struct adb_block *b, struct apk_istream *is, struct adb_verify_ctx *);
 int adb_c_adb(struct apk_ostream *os, struct adb *db, struct apk_trust *t);
 int adb_c_create(struct apk_ostream *os, struct adb *db, struct apk_trust *t);
diff --git a/src/adb_walk_adb.c b/src/adb_walk_adb.c
index 3ceac566..e1a686dc 100644
--- a/src/adb_walk_adb.c
+++ b/src/adb_walk_adb.c
@@ -115,7 +115,7 @@ static int adb_walk_block(struct adb *db, struct adb_block *b, struct apk_istrea
 	struct adb_sign_hdr *s;
 	uint32_t schema_magic = ctx->db.schema;
 	const struct adb_db_schema *ds;
-	size_t sz = adb_block_length(b);
+	uint64_t sz = adb_block_length(b);
 	apk_blob_t data, c = APK_BLOB_BUF(tmp);
 	int r;
 
@@ -142,10 +142,10 @@ static int adb_walk_block(struct adb *db, struct adb_block *b, struct apk_istrea
 		apk_blob_push_fmt(&c, ": %s", r ? apk_error_str(r) : "OK");
 		break;
 	case ADB_BLOCK_DATA:
-		apk_blob_push_fmt(&c, "data block, size: %zu", sz);
+		apk_blob_push_fmt(&c, "data block, size: %" PRIu64, sz);
 		break;
 	default:
-		apk_blob_push_fmt(&c, "unknown block %d, size: %zu", adb_block_type(b), sz);
+		apk_blob_push_fmt(&c, "unknown block %d, size: %" PRIu64, adb_block_type(b), sz);
 		break;
 	}
 	d->ops->comment(d, apk_blob_pushed(APK_BLOB_BUF(tmp), c));
diff --git a/src/extract_v3.c b/src/extract_v3.c
index d98fe99b..e90cb249 100644
--- a/src/extract_v3.c
+++ b/src/extract_v3.c
@@ -182,7 +182,7 @@ static int apk_extract_v3_data_block(struct adb *db, struct adb_block *b, struct
 	struct apk_extract_v3_ctx *ctx = container_of(db, struct apk_extract_v3_ctx, db);
 	struct apk_extract_ctx *ectx = ctx->ectx;
 	struct adb_data_package *hdr;
-	size_t sz = adb_block_length(b);
+	uint64_t sz = adb_block_length(b);
 	int r;
 
 	if (adb_block_type(b) != ADB_BLOCK_DATA) return 0;
-- 
GitLab


From bb483869461a06f418471f40ac536444e077277a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timo=20Ter=C3=A4s?= <timo.teras@iki.fi>
Date: Mon, 11 Sep 2023 13:19:58 +0300
Subject: [PATCH 2/2] adb: add support for 64-bit integers

---
 src/adb.c       | 25 ++++++++++++++++++-------
 src/adb.h       |  8 ++++----
 src/apk_adb.c   |  9 +++++----
 src/app_mkpkg.c |  2 +-
 4 files changed, 28 insertions(+), 16 deletions(-)

diff --git a/src/adb.c b/src/adb.c
index 4bc89d43..fe614afa 100644
--- a/src/adb.c
+++ b/src/adb.c
@@ -354,9 +354,10 @@ adb_val_t adb_r_root(const struct adb *db)
 	return ((struct adb_hdr*)db->adb.ptr)->root;
 }
 
-uint32_t adb_r_int(const struct adb *db, adb_val_t v)
+uint64_t adb_r_int(const struct adb *db, adb_val_t v)
 {
 	uint32_t *int4;
+	uint64_t *int8;
 
 	switch (ADB_VAL_TYPE(v)) {
 	case ADB_TYPE_INT:
@@ -365,6 +366,10 @@ uint32_t adb_r_int(const struct adb *db, adb_val_t v)
 		int4 = adb_r_deref(db, v, 0, sizeof int4);
 		if (!int4) return 0;
 		return le32toh(*int4);
+	case ADB_TYPE_INT_64:
+		int8 = adb_r_deref(db, v, 0, sizeof int8);
+		if (!int8) return 0;
+		return le64toh(*int8);
 	default:
 		return 0;
 	}
@@ -445,7 +450,7 @@ adb_val_t adb_ro_val(const struct adb_obj *o, unsigned i)
 	return o->obj[i];
 }
 
-uint32_t adb_ro_int(const struct adb_obj *o, unsigned i)
+uint64_t adb_ro_int(const struct adb_obj *o, unsigned i)
 {
 	return adb_r_int(o->db, adb_ro_val(o, i));
 }
@@ -702,11 +707,15 @@ static adb_val_t adb_w_blob_raw(struct adb *db, apk_blob_t b)
 	return val;
 }
 
-adb_val_t adb_w_int(struct adb *db, uint32_t val)
+adb_val_t adb_w_int(struct adb *db, uint64_t val)
 {
+	if (val >= 0x100000000) {
+		val = htole64(val);
+		return ADB_VAL(ADB_TYPE_INT_64, adb_w_data1(db, &val, sizeof val, sizeof val));
+	}
 	if (val >= 0x10000000) {
-		val = htole32(val);
-		return ADB_VAL(ADB_TYPE_INT_32, adb_w_data1(db, &val, sizeof val, sizeof val));
+		uint32_t val32 = htole32(val);
+		return ADB_VAL(ADB_TYPE_INT_32, adb_w_data1(db, &val32, sizeof val32, sizeof val32));
 	}
 	return ADB_VAL(ADB_TYPE_INT, val);
 }
@@ -725,6 +734,9 @@ adb_val_t adb_w_copy(struct adb *db, struct adb *srcdb, adb_val_t v)
 	case ADB_TYPE_INT_32:
 		sz = align = sizeof(uint32_t);
 		goto copy;
+	case ADB_TYPE_INT_64:
+		sz = align = sizeof(uint64_t);
+		goto copy;
 	case ADB_TYPE_BLOB_8:
 		ptr = adb_r_deref(srcdb, v, 0, 1);
 		sz = 1UL + *(uint8_t*) ptr;
@@ -744,7 +756,6 @@ adb_val_t adb_w_copy(struct adb *db, struct adb *srcdb, adb_val_t v)
 		for (int i = ADBI_FIRST; i < sz; i++) cpy[i] = adb_w_copy(db, srcdb, adb_ro_val(&obj, i));
 		return ADB_VAL(ADB_VAL_TYPE(v), adb_w_data1(db, cpy, sizeof(adb_val_t[sz]), sizeof(adb_val_t)));
 	}
-	case ADB_TYPE_INT_64:
 	case ADB_TYPE_BLOB_32:
 	default:
 		return adb_w_error(db, ENOSYS);
@@ -910,7 +921,7 @@ adb_val_t adb_wo_val_fromstring(struct adb_obj *o, unsigned i, apk_blob_t val)
 	return o->obj[i] = adb_w_fromstring(o->db, o->schema->fields[i-1].kind, val);
 }
 
-adb_val_t adb_wo_int(struct adb_obj *o, unsigned i, uint32_t v)
+adb_val_t adb_wo_int(struct adb_obj *o, unsigned i, uint64_t v)
 {
 	return adb_wo_val(o, i, adb_w_int(o->db, v));
 }
diff --git a/src/adb.h b/src/adb.h
index 32152ae2..36415704 100644
--- a/src/adb.h
+++ b/src/adb.h
@@ -204,7 +204,7 @@ int adb_w_init_static(struct adb *db, void *buf, size_t bufsz);
 /* Primitive read */
 adb_val_t adb_r_root(const struct adb *);
 struct adb_obj *adb_r_rootobj(struct adb *a, struct adb_obj *o, const struct adb_object_schema *);
-uint32_t adb_r_int(const struct adb *, adb_val_t);
+uint64_t adb_r_int(const struct adb *, adb_val_t);
 apk_blob_t adb_r_blob(const struct adb *, adb_val_t);
 struct adb_obj *adb_r_obj(struct adb *, adb_val_t, struct adb_obj *o, const struct adb_object_schema *);
 
@@ -214,7 +214,7 @@ static inline uint32_t adb_ra_num(const struct adb_obj *o) { return (o->num ?: 1
 
 const uint8_t *adb_ro_kind(const struct adb_obj *o, unsigned i);
 adb_val_t adb_ro_val(const struct adb_obj *o, unsigned i);
-uint32_t adb_ro_int(const struct adb_obj *o, unsigned i);
+uint64_t adb_ro_int(const struct adb_obj *o, unsigned i);
 apk_blob_t adb_ro_blob(const struct adb_obj *o, unsigned i);
 struct adb_obj *adb_ro_obj(const struct adb_obj *o, unsigned i, struct adb_obj *);
 int adb_ro_cmpobj(const struct adb_obj *o1, const struct adb_obj *o2, unsigned mode);
@@ -226,7 +226,7 @@ void adb_w_root(struct adb *, adb_val_t);
 void adb_w_rootobj(struct adb_obj *);
 adb_val_t adb_w_blob_vec(struct adb *, uint32_t, apk_blob_t *);
 adb_val_t adb_w_blob(struct adb *, apk_blob_t);
-adb_val_t adb_w_int(struct adb *, uint32_t);
+adb_val_t adb_w_int(struct adb *, uint64_t);
 adb_val_t adb_w_copy(struct adb *, struct adb *, adb_val_t);
 adb_val_t adb_w_adb(struct adb *, struct adb *);
 adb_val_t adb_w_fromstring(struct adb *, const uint8_t *kind, apk_blob_t);
@@ -245,7 +245,7 @@ int adb_wo_fromstring(struct adb_obj *o, apk_blob_t);
 int adb_wo_copyobj(struct adb_obj *o, struct adb_obj *);
 adb_val_t adb_wo_val(struct adb_obj *o, unsigned i, adb_val_t);
 adb_val_t adb_wo_val_fromstring(struct adb_obj *o, unsigned i, apk_blob_t);
-adb_val_t adb_wo_int(struct adb_obj *o, unsigned i, uint32_t);
+adb_val_t adb_wo_int(struct adb_obj *o, unsigned i, uint64_t);
 adb_val_t adb_wo_blob(struct adb_obj *o, unsigned i, apk_blob_t);
 adb_val_t adb_wo_blob_raw(struct adb_obj *o, unsigned i, apk_blob_t);
 adb_val_t adb_wo_obj(struct adb_obj *o, unsigned i, struct adb_obj *);
diff --git a/src/apk_adb.c b/src/apk_adb.c
index 6dfb301f..0448530a 100644
--- a/src/apk_adb.c
+++ b/src/apk_adb.c
@@ -1,4 +1,5 @@
 #include <errno.h>
+#include <inttypes.h>
 #include "adb.h"
 #include "apk_adb.h"
 #include "apk_print.h"
@@ -221,7 +222,7 @@ static struct adb_scalar_schema scalar_hexblob = {
 
 static apk_blob_t int_tostring(struct adb *db, adb_val_t val, char *buf, size_t bufsz)
 {
-	return APK_BLOB_PTR_LEN(buf, snprintf(buf, bufsz, "%u", adb_r_int(db, val)));
+	return APK_BLOB_PTR_LEN(buf, snprintf(buf, bufsz, "%" PRIu64, adb_r_int(db, val)));
 }
 
 static adb_val_t int_fromstring(struct adb *db, apk_blob_t val)
@@ -233,8 +234,8 @@ static adb_val_t int_fromstring(struct adb *db, apk_blob_t val)
 
 static int int_compare(struct adb *db1, adb_val_t v1, struct adb *db2, adb_val_t v2)
 {
-	uint32_t r1 = adb_r_int(db1, v1);
-	uint32_t r2 = adb_r_int(db1, v2);
+	uint64_t r1 = adb_r_int(db1, v1);
+	uint64_t r2 = adb_r_int(db1, v2);
 	if (r1 < r2) return -1;
 	if (r1 > r2) return 1;
 	return 0;
@@ -249,7 +250,7 @@ static struct adb_scalar_schema scalar_int = {
 
 static apk_blob_t oct_tostring(struct adb *db, adb_val_t val, char *buf, size_t bufsz)
 {
-	return APK_BLOB_PTR_LEN(buf, snprintf(buf, bufsz, "%o", adb_r_int(db, val)));
+	return APK_BLOB_PTR_LEN(buf, snprintf(buf, bufsz, "%" PRIo64, adb_r_int(db, val)));
 }
 
 static adb_val_t oct_fromstring(struct adb *db, apk_blob_t val)
diff --git a/src/app_mkpkg.c b/src/app_mkpkg.c
index 8984700e..ed885ede 100644
--- a/src/app_mkpkg.c
+++ b/src/app_mkpkg.c
@@ -423,7 +423,7 @@ static int mkpkg_main(void *pctx, struct apk_ctx *ac, struct apk_string_array *a
 			adb_ro_obj(&files, j, &file);
 			apk_blob_t filename = adb_ro_blob(&file, ADBI_FI_NAME);
 			apk_blob_t target = adb_ro_blob(&file, ADBI_FI_TARGET);
-			size_t sz = adb_ro_int(&file, ADBI_FI_SIZE);
+			uint64_t sz = adb_ro_int(&file, ADBI_FI_SIZE);
 			if (!APK_BLOB_IS_NULL(target)) continue;
 			if (!sz) continue;
 			struct adb_data_package hdr = {
-- 
GitLab

