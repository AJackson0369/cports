a mild refactor to accomodate changes in poppler api

-- q66

--- a/src/extension/internal/pdfinput/pdf-parser.cpp
+++ b/src/extension/internal/pdfinput/pdf-parser.cpp
@@ -686,11 +686,13 @@ void PdfParser::opSetLineWidth(Object args[], int /*numArgs*/)
 void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
 {
     Object obj1, obj2, obj3, obj4, obj5;
-    Function *funcs[4] = {nullptr, nullptr, nullptr, nullptr};
+    std::vector<std::unique_ptr<Function>> funcs;
     GfxColor backdropColor;
     GBool haveBackdropColor = gFalse;
     GBool alpha = gFalse;
 
+    funcs.resize(4);
+
     _POPPLER_CALL_ARGS(obj1, res->lookupGState, args[0].getName());
     if (obj1.isNull()) {
         return;
@@ -749,13 +751,12 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
         _POPPLER_CALL_ARGS(obj2, obj1.dictLookup, "TR");
     }
     if (obj2.isName(const_cast<char *>("Default")) || obj2.isName(const_cast<char *>("Identity"))) {
-        funcs[0] = funcs[1] = funcs[2] = funcs[3] = nullptr;
-        state->setTransfer(funcs);
+        state->setTransfer(std::move(funcs));
     } else if (obj2.isArray() && obj2.arrayGetLength() == 4) {
         int pos = 4;
         for (int i = 0; i < 4; ++i) {
             _POPPLER_CALL_ARGS(obj3, obj2.arrayGet, i);
-            funcs[i] = Function::parse(&obj3);
+            funcs[i] = std::move(Function::parse(&obj3));
             if (!funcs[i]) {
                 pos = i;
                 break;
@@ -763,17 +764,18 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
         }
         _POPPLER_FREE(obj3);
         if (pos == 4) {
-            state->setTransfer(funcs);
+            state->setTransfer(std::move(funcs));
         }
     } else if (obj2.isName() || obj2.isDict() || obj2.isStream()) {
-        if ((funcs[0] = Function::parse(&obj2))) {
-            funcs[1] = funcs[2] = funcs[3] = nullptr;
-            state->setTransfer(funcs);
+        if ((funcs[0] = std::move(Function::parse(&obj2)))) {
+            state->setTransfer(std::move(funcs));
         }
     } else if (!obj2.isNull()) {
         error(errSyntaxError, getPos(), "Invalid transfer function in ExtGState");
     }
 
+    funcs.clear();
+
     // soft mask
     if (!_POPPLER_CALL_ARGS_DEREF(obj2, obj1.dictLookup, "SMask").isNull()) {
         if (obj2.isName(const_cast<char *>("None"))) {
@@ -785,13 +787,12 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
                 alpha = gFalse;
             }
             _POPPLER_FREE(obj3);
-            funcs[0] = nullptr;
+            funcs.resize(1);
             if (!_POPPLER_CALL_ARGS_DEREF(obj3, obj2.dictLookup, "TR").isNull()) {
-                funcs[0] = Function::parse(&obj3);
+                funcs[0] = std::move(Function::parse(&obj3));
                 if (funcs[0]->getInputSize() != 1 || funcs[0]->getOutputSize() != 1) {
                     error(errSyntaxError, getPos(), "Invalid transfer function in soft mask in ExtGState");
-                    delete funcs[0];
-                    funcs[0] = nullptr;
+                    funcs[0].reset();
                 }
             }
             _POPPLER_FREE(obj3);
@@ -835,9 +836,9 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
                             }
                         }
                     }
-                    doSoftMask(&obj3, alpha, blendingColorSpace.get(), isolated, knockout, funcs[0], &backdropColor);
+                    doSoftMask(&obj3, alpha, blendingColorSpace.get(), isolated, knockout, funcs[0].get(), &backdropColor);
                     if (funcs[0]) {
-                        delete funcs[0];
+                        funcs[0].reset();
                     }
                 } else {
                     error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState - missing group");
