diff --git a/plugins/itemencrypted/itemencrypted.cpp b/plugins/itemencrypted/itemencrypted.cpp
index 666dedd..0cd13e5 100644
--- a/plugins/itemencrypted/itemencrypted.cpp
+++ b/plugins/itemencrypted/itemencrypted.cpp
@@ -859,7 +859,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     Command c;
     c.internalId = QStringLiteral("copyq_encrypted_encrypt");
     c.name = ItemEncryptedLoader::tr("Encrypt (needs GnuPG)");
-    c.icon = QString(QChar(IconLock));
+    c.icon = QString(QChar(int(IconLock)));
     c.input = "!OUTPUT";
     c.output = mimeEncryptedData;
     c.inMenu = true;
@@ -870,7 +870,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     c = Command();
     c.internalId = QStringLiteral("copyq_encrypted_decrypt");
     c.name = ItemEncryptedLoader::tr("Decrypt");
-    c.icon = QString(QChar(IconUnlock));
+    c.icon = QString(QChar(int(IconUnlock)));
     c.input = mimeEncryptedData;
     c.output = mimeItems;
     c.inMenu = true;
@@ -881,7 +881,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     c = Command();
     c.internalId = QStringLiteral("copyq_encrypted_decrypt_and_copy");
     c.name = ItemEncryptedLoader::tr("Decrypt and Copy");
-    c.icon = QString(QChar(IconUnlockKeyhole));
+    c.icon = QString(QChar(int(IconUnlockKeyhole)));
     c.input = mimeEncryptedData;
     c.inMenu = true;
     c.cmd = "copyq: plugins.itemencrypted.copyEncryptedItems()";
@@ -891,7 +891,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     c = Command();
     c.internalId = QStringLiteral("copyq_encrypted_decrypt_and_paste");
     c.name = ItemEncryptedLoader::tr("Decrypt and Paste");
-    c.icon = QString(QChar(IconUnlockKeyhole));
+    c.icon = QString(QChar(int(IconUnlockKeyhole)));
     c.input = mimeEncryptedData;
     c.inMenu = true;
     c.cmd = "copyq: plugins.itemencrypted.pasteEncryptedItems()";
diff --git a/plugins/itemfakevim/fakevim/fakevimhandler.cpp b/plugins/itemfakevim/fakevim/fakevimhandler.cpp
index c28d250..eaac162 100644
--- a/plugins/itemfakevim/fakevim/fakevimhandler.cpp
+++ b/plugins/itemfakevim/fakevim/fakevimhandler.cpp
@@ -1033,7 +1033,7 @@ QString quoteUnprintable(const QString &ba)
         else if (cc == '\n')
             res += "<CR>";
         else
-            res += QString("\\x%1").arg(c.unicode(), 2, 16, QLatin1Char('0'));
+            res += QString("\\x%1").arg(int(c.unicode()), 2, 16, QLatin1Char('0'));
     }
     return res;
 }
diff --git a/plugins/itempinned/itempinned.cpp b/plugins/itempinned/itempinned.cpp
index eb2518d..9d51c75 100644
--- a/plugins/itempinned/itempinned.cpp
+++ b/plugins/itempinned/itempinned.cpp
@@ -32,7 +32,7 @@ bool isPinned(const QModelIndex &index)
 Command dummyPinCommand()
 {
     Command c;
-    c.icon = QString(QChar(IconThumbtack));
+    c.icon = QString(QChar(int(IconThumbtack)));
     c.inMenu = true;
     return c;
 }
diff --git a/plugins/itemtags/itemtags.cpp b/plugins/itemtags/itemtags.cpp
index fe2a2f4..15242a1 100644
--- a/plugins/itemtags/itemtags.cpp
+++ b/plugins/itemtags/itemtags.cpp
@@ -153,7 +153,7 @@ QString removeTagText()
 Command dummyTagCommand()
 {
     Command c;
-    c.icon = QString(QChar(IconTag));
+    c.icon = QString(QChar(int(IconTag)));
     c.inMenu = true;
     return c;
 }
diff --git a/src/common/globalshortcutcommands.cpp b/src/common/globalshortcutcommands.cpp
index 4bb8b75..32b43ff 100644
--- a/src/common/globalshortcutcommands.cpp
+++ b/src/common/globalshortcutcommands.cpp
@@ -50,7 +50,7 @@ Command createGlobalShortcut(const QString &name, const QString &script, IconId
     c.internalId = internalId;
     c.name = name;
     c.cmd = "copyq: " + script;
-    c.icon = QString(QChar(icon));
+    c.icon = QString(QChar(int(icon)));
     c.isGlobalShortcut = true;
     return c;
 }
diff --git a/src/common/predefinedcommands.cpp b/src/common/predefinedcommands.cpp
index 236755a..ac4db3e 100644
--- a/src/common/predefinedcommands.cpp
+++ b/src/common/predefinedcommands.cpp
@@ -38,14 +38,14 @@ QVector<Command> predefinedCommands()
     commands.prepend(Command());
     c = &commands.first();
     c->name = AddCommandDialog::tr("New command");
-    c->icon = QString(QChar(IconFile));
+    c->icon = QString(QChar(int(IconFile)));
     c->input = c->output = QString();
     c->wait = c->automatic = c->remove = false;
     c->sep = QLatin1String("\\n");
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Ignore items with no or single character");
-    c->icon = QString(QChar(IconCircleExclamation));
+    c->icon = QString(QChar(int(IconCircleExclamation)));
     c->cmd  = R"(function hasEmptyOrSingleCharText() {
     if (dataFormats().includes(mimeText)) {
         var text = str(data(mimeText));
@@ -83,7 +83,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Open in &Browser");
     c->re   = reURL;
-    c->icon = QString(QChar(IconGlobe));
+    c->icon = QString(QChar(int(IconGlobe)));
     c->cmd  = QStringLiteral("copyq open %1");
     c->hideWindow = true;
     c->inMenu = true;
@@ -91,7 +91,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Paste as Plain Text");
     c->input = mimeText;
-    c->icon = QString(QChar(IconPaste));
+    c->icon = QString(QChar(int(IconPaste)));
     c->cmd  = QStringLiteral("copyq:") + pasteAsPlainTextScript("input()");
     c->hideWindow = true;
     c->inMenu = true;
@@ -99,7 +99,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Autoplay videos");
     c->re   = QRegularExpression("^http://.*\\.(mp4|avi|mkv|wmv|flv|ogv)$");
-    c->icon = QString(QChar(IconCirclePlay));
+    c->icon = QString(QChar(int(IconCirclePlay)));
     c->cmd  = QStringLiteral("copyq open %1");
     c->automatic = true;
     c->hideWindow = true;
@@ -108,13 +108,13 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Copy URL (web address) to other tab");
     c->re   = reURL;
-    c->icon = QString(QChar(IconCopy));
+    c->icon = QString(QChar(int(IconCopy)));
     c->tab  = QStringLiteral("&web");
     c->automatic = true;
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Create thumbnail (needs ImageMagick)");
-    c->icon = QString(QChar(IconImage));
+    c->icon = QString(QChar(int(IconImage)));
     c->cmd  = QStringLiteral("convert - -resize 92x92 png:-");
     c->input = QStringLiteral("image/png");
     c->output = QStringLiteral("image/png");
@@ -123,7 +123,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Create QR Code from URL (needs qrencode)");
     c->re   = reURL;
-    c->icon = QString(QChar(IconQrcode));
+    c->icon = QString(QChar(int(IconQrcode)));
     c->cmd  = QStringLiteral("qrencode -o - -t PNG -s 6");
     c->input = mimeText;
     c->output = QStringLiteral("image/png");
@@ -134,7 +134,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Add to %1 tab", "%1 is quoted Tasks tab name")
             .arg(todoTabQuoted);
-    c->icon = QString(QChar(IconShare));
+    c->icon = QString(QChar(int(IconShare)));
     c->tab  = todoTab;
     c->input = mimeText;
     c->inMenu = true;
@@ -142,7 +142,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Move to %1 tab", "%1 is quoted Tasks tab name")
             .arg(todoTabQuoted);
-    c->icon = QString(QChar(IconShare));
+    c->icon = QString(QChar(int(IconShare)));
     c->tab  = todoTab;
     c->remove = true;
     c->inMenu = true;
@@ -150,7 +150,7 @@ synchronizeToSelection = function() {
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Ignore copied files");
     c->re   = reNotURL;
-    c->icon = QString(QChar(IconCircleExclamation));
+    c->icon = QString(QChar(int(IconCircleExclamation)));
     c->input = mimeUriList;
     c->remove = true;
     c->automatic = true;
@@ -159,7 +159,7 @@ synchronizeToSelection = function() {
         c = newCommand(&commands);
         c->name = AddCommandDialog::tr("Ignore *\"Password\"* window");
         c->wndre = QRegularExpression(AddCommandDialog::tr("Password"));
-        c->icon = QString(QChar(IconAsterisk));
+        c->icon = QString(QChar(int(IconAsterisk)));
         c->remove = true;
         c->automatic = true;
         c->cmd = QStringLiteral("copyq ignore");
@@ -167,14 +167,14 @@ synchronizeToSelection = function() {
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Move to Trash");
-    c->icon = QString(QChar(IconTrash));
+    c->icon = QString(QChar(int(IconTrash)));
     c->inMenu = true;
     c->tab  = AddCommandDialog::tr("(trash)");
     c->remove = true;
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Clear Current Tab");
-    c->icon = QString(QChar(IconBroom));
+    c->icon = QString(QChar(int(IconBroom)));
     c->inMenu = true;
     c->cmd = QStringLiteral("copyq: ItemSelection(selectedTab()).selectRemovable().removeAll()");
     c->matchCmd = QStringLiteral("copyq: tab(selectedTab()); if (size() == 0) fail()");
diff --git a/src/gui/commanddialog.cpp b/src/gui/commanddialog.cpp
index 2ac1355..01454e8 100644
--- a/src/gui/commanddialog.cpp
+++ b/src/gui/commanddialog.cpp
@@ -48,7 +48,7 @@ QIcon getCommandIcon(const QString &iconString, int commandType)
           : commandType & CommandType::Menu ? QColor(100,220,255)
           : QColor(255,100,100);
 
-    return iconFromFile(iconString, QString(QChar(icon)), color);
+    return iconFromFile(iconString, QString(QChar(int(icon))), color);
 }
 
 bool hasCommandsToPaste(const QString &text)
diff --git a/src/scriptable/scriptable.cpp b/src/scriptable/scriptable.cpp
index 8893140..914a03a 100644
--- a/src/scriptable/scriptable.cpp
+++ b/src/scriptable/scriptable.cpp
@@ -2912,7 +2912,7 @@ void Scriptable::showExceptionMessage(const QString &message)
     QtPrivate::QHashCombine hash;
     const auto id = hash(hash(0, title), message);
     const auto notificationId = QString::number(id);
-    m_proxy->showMessage(title, message, QString(QChar(IconCircleExclamation)), 8000, notificationId);
+    m_proxy->showMessage(title, message, QString(QChar(int(IconCircleExclamation))), 8000, notificationId);
 }
 
 QVector<int> Scriptable::getRows() const
