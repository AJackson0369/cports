Patch-Source: https://github.com/brailcom/speechd/commit/2c5b2fa3abe40746a10f0dfb4285fc94ed60151d
--
From 2c5b2fa3abe40746a10f0dfb4285fc94ed60151d Mon Sep 17 00:00:00 2001
From: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date: Mon, 5 Jun 2023 23:57:38 +0200
Subject: [PATCH] Pave the way for using raw sockets

Better make sure that the socket field is up to date, and use it, and
that is paving the way for using raw sockets.
---
 src/api/c/libspeechd.c | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/src/api/c/libspeechd.c b/src/api/c/libspeechd.c
index e167ac95..6d2aabfd 100644
--- a/src/api/c/libspeechd.c
+++ b/src/api/c/libspeechd.c
@@ -620,9 +620,11 @@ void spd_close(SPDConnection * connection)
 	}
 
 	/* close the socket */
-	if (connection->stream != NULL)
+	if (connection->stream != NULL) {
 		fclose(connection->stream);
-	connection->stream = NULL;
+		connection->stream = NULL;
+		connection->socket = -1;
+	}
 
 	pthread_mutex_unlock(&connection->ssip_mutex);
 
@@ -1659,7 +1661,7 @@ char *spd_send_data(SPDConnection * connection, const char *message, int wfr)
 	char *reply;
 	pthread_mutex_lock(&connection->ssip_mutex);
 
-	if (connection->stream == NULL)
+	if (connection->socket < 0)
 		RET(NULL);
 
 	reply = spd_send_data_wo_mutex(connection, message, wfr);
@@ -1681,7 +1683,7 @@ char *spd_send_data_wo_mutex(SPDConnection * connection, const char *message,
 
 	SPD_DBG("Inside spd_send_data_wo_mutex");
 
-	if (connection->stream == NULL)
+	if (connection->socket < 0)
 		return NULL;
 
 	if (connection->mode == SPD_MODE_THREADED) {
@@ -1817,8 +1819,11 @@ static char *get_reply(SPDConnection * connection)
 			SPD_DBG
 			    ("Error: Can't read reply, broken socket in get_reply!");
 			if (connection->stream != NULL)
+			{
 				fclose(connection->stream);
-			connection->stream = NULL;
+				connection->stream = NULL;
+				connection->socket = -1;
+			}
 			errors = TRUE;
 		} else {
 			g_string_append(data.str, data.line);
@@ -1953,9 +1958,11 @@ static void *spd_events_handler(void *conn)
 	/* In case of broken socket, we must still signal reply ready */
 	if (connection->reply == NULL) {
 		SPD_DBG("Signalling reply ready after communication failure");
-		if (connection->stream != NULL)
+		if (connection->stream != NULL) {
 			fclose(connection->stream);
-		connection->stream = NULL;
+			connection->stream = NULL;
+			connection->socket = -1;
+		}
 		pthread_cond_signal(&connection->td->cond_reply_ready);
 		pthread_exit(0);
 	}
