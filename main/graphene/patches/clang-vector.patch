commit 2cba8340ad7448194e7ce45ee6074f8cca30f3f3
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Wed Dec 29 18:16:56 2021 +0100

    add clang support for generic vector intrinsics

diff --git a/doc/graphene-sections.txt b/doc/graphene-sections.txt
index e874bf0..c5e2444 100644
--- a/doc/graphene-sections.txt
+++ b/doc/graphene-sections.txt
@@ -631,10 +631,12 @@ GRAPHENE_MINOR_VERSION
 GRAPHENE_MICRO_VERSION
 <SUBSECTION Standard>
 GRAPHENE_HAS_GCC
+GRAPHENE_HAS_INTRINSICS
 GRAPHENE_HAS_SCALAR
 GRAPHENE_HAS_SSE
 GRAPHENE_HAS_ARM_NEON
 GRAPHENE_USE_GCC
+GRAPHENE_USE_INTRINSICS
 GRAPHENE_USE_SCALAR
 GRAPHENE_USE_SSE
 GRAPHENE_USE_ARM_NEON
diff --git a/include/graphene-config.h.meson b/include/graphene-config.h.meson
index 96192cc..1d28b91 100644
--- a/include/graphene-config.h.meson
+++ b/include/graphene-config.h.meson
@@ -25,6 +25,11 @@ extern "C" {
 
 #  if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 9)) && !defined(__arm__)
 #mesondefine GRAPHENE_HAS_GCC
+#mesondefine GRAPHENE_HAS_INTRINSICS
+#  endif
+
+#  if defined(__clang__) && !defined(__arm__)
+#mesondefine GRAPHENE_HAS_INTRINSICS
 #  endif
 
 #  define GRAPHENE_HAS_SCALAR 1
@@ -36,9 +41,12 @@ extern "C" {
 # elif defined(GRAPHENE_HAS_ARM_NEON)
 #  define GRAPHENE_USE_ARM_NEON
 #  define GRAPHENE_SIMD_S "neon"
-# elif defined(GRAPHENE_HAS_GCC)
-#  define GRAPHENE_USE_GCC
-#  define GRAPHENE_SIMD_S "gcc"
+# elif defined(GRAPHENE_HAS_INTRINSICS)
+#  if defined(GRAPHENE_HAS_GCC)
+#    define GRAPHENE_USE_GCC
+#  endif
+#  define GRAPHENE_USE_INTRINSICS
+#  define GRAPHENE_SIMD_S "intrinsics"
 # elif defined(GRAPHENE_HAS_SCALAR)
 #  define GRAPHENE_USE_SCALAR
 #  define GRAPHENE_SIMD_S "scalar"
@@ -65,7 +73,7 @@ typedef __m128 graphene_simd4f_t;
 # elif defined(GRAPHENE_USE_ARM_NEON)
 #  include <arm_neon.h>
 typedef float32x4_t graphene_simd4f_t;
-# elif defined(GRAPHENE_USE_GCC)
+# elif defined(GRAPHENE_USE_INTRINSICS)
 typedef float graphene_simd4f_t __attribute__((vector_size(16)));
 # elif defined(GRAPHENE_USE_SCALAR)
 typedef struct {
diff --git a/include/graphene-simd4f.h b/include/graphene-simd4f.h
index f95fe04..f1bb0f1 100644
--- a/include/graphene-simd4f.h
+++ b/include/graphene-simd4f.h
@@ -773,12 +773,20 @@ _simd4f_neg (const graphene_simd4f_t s)
 
 # endif /* !__GNUC__ && !_MSC_VER */
 
-#elif !defined(__GI_SCANNER__) && defined(GRAPHENE_USE_GCC)
+#elif !defined(__GI_SCANNER__) && defined(GRAPHENE_USE_INTRINSICS)
 
-/* GCC vector intrinsic implementation of SIMD 4f */
+/* GCC/Clang vector intrinsic implementation of SIMD 4f */
 
 typedef int graphene_simd4i_t __attribute__((vector_size (16)));
 
+#if defined(__clang__)
+#define __graphene_simd_shuffle1(a, m1, m2, m3, m4) __builtin_shufflevector(a, a, m1, m2, m3, m4)
+#define __graphene_simd_shuffle2(a, b, m1, m2, m3, m4) __builtin_shufflevector(a, b, m1, m2, m3, m4)
+#else
+#define __graphene_simd_shuffle1(a, m1, m2, m3, m4) __builtin_shuffle(a, (const graphene_simd4i_t){m1, m2, m3, m4})
+#define __graphene_simd_shuffle2(a, b, m1, m2, m3, m4) __builtin_shuffle(a, b, (const graphene_simd4i_t){m1, m2, m3, m4})
+#endif
+
 # define graphene_simd4f_init(x,y,z,w) \
   (__extension__ ({ \
     (graphene_simd4f_t) { (x), (y), (z), (w) }; \
@@ -940,50 +948,42 @@ typedef int graphene_simd4i_t __attribute__((vector_size (16)));
 
 # define graphene_simd4f_shuffle_wxyz(v) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 3, 0, 1, 2 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((v), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle1((v), 3, 0, 1, 2); \
   }))
 
 # define graphene_simd4f_shuffle_zwxy(v) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 2, 3, 0, 1 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((v), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle1((v), 2, 3, 0, 1); \
   }))
 
 # define graphene_simd4f_shuffle_yzwx(v) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 1, 2, 3, 0 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((v), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle1((v), 1, 2, 3, 0); \
   }))
 
 # define graphene_simd4f_zero_w(v) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 0, 1, 2, 4 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((v), graphene_simd4f_init_zero (), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle2((v), graphene_simd4f_init_zero (), 0, 1, 2, 4); \
   }))
 
 # define graphene_simd4f_zero_zw(v) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 0, 1, 4, 4 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((v), graphene_simd4f_init_zero (), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle2((v), graphene_simd4f_init_zero (), 0, 1, 4, 4); \
   }))
 
 # define graphene_simd4f_merge_w(s,v) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 0, 1, 2, 4 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((s), graphene_simd4f_splat ((v)), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle2((s), graphene_simd4f_splat ((v)), 0, 1, 2, 4); \
   }))
 
 # define graphene_simd4f_merge_high(a,b) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 2, 3, 6, 7 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((a), (b), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle2((a), (b), 2, 3, 6, 7); \
   }))
 
 # define graphene_simd4f_merge_low(a,b) \
   (__extension__ ({ \
-    const graphene_simd4i_t __mask = { 0, 1, 4, 5 }; \
-    (graphene_simd4f_t) __builtin_shuffle ((a), (b), __mask); \
+    (graphene_simd4f_t) __graphene_simd_shuffle2((a), (b), 0, 1, 4, 5); \
   }))
 
 # define graphene_simd4f_flip_sign_0101(v) \
diff --git a/include/graphene-simd4x4f.h b/include/graphene-simd4x4f.h
index f6e81fd..69d4e8f 100644
--- a/include/graphene-simd4x4f.h
+++ b/include/graphene-simd4x4f.h
@@ -157,7 +157,7 @@ void    graphene_simd4x4f_transpose_in_place    (graphene_simd4x4f_t *s);
   _MM_TRANSPOSE4_PS ((s)->x, (s)->y, (s)->z, (s)->w)
 #endif
 
-#elif defined(GRAPHENE_USE_GCC)
+#elif defined(GRAPHENE_USE_INTRINSICS)
 
 #define graphene_simd4x4f_transpose_in_place(s) \
   (__extension__ ({ \
diff --git a/meson.build b/meson.build
index e880d28..6328d8b 100644
--- a/meson.build
+++ b/meson.build
@@ -304,31 +304,38 @@ int main () {
   endif
 endif
 
-# GCC vector intrinsics
+# GCC/Clang vector intrinsics
 if get_option('gcc_vector')
-  gcc_vector_prog = '''
-#if defined(__GNUC__)
-# if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 9)
-#   error "GCC vector intrinsics are disabled on GCC prior to 4.9"
+  vector_intrin_prog = '''
+#if defined(__GNUC__) // Clang advertises __GNUC__ too
+# if __GNUC__ < 4 || ((__GNUC__ == 4 && __GNUC_MINOR__ < 9) && !defined(__clang__))
+#   error "GCC/Clang vector intrinsics are disabled on GCC prior to 4.9"
 # elif defined(__arm__)
-#   error "GCC vector intrinsics are disabled on ARM"
-# elif !defined(__x86_64__)
-#   error "GCC vector intrinsics are disabled on 32bit"
+#   error "GCC/Clang vector intrinsics are disabled on ARM"
+# elif (__SIZEOF_POINTER__ < 8)
+#   error "GCC/Clang vector intrinsics are disabled on 32bit"
 # endif
 #else
-# error "Need GCC for GCC vectors intrinsics"
+# error "Need GCC or Clang for GCC/Clang vectors intrinsics"
 #endif
 typedef float simd4f __attribute__((vector_size(16)));
 typedef int simd4i __attribute__((vector_size(16)));
 int main () {
   simd4f s = { 1.f, 2.f, 3.f, 4.f };
+#ifdef __clang__
+  simd4f r = __builtin_shufflevector (s, s, 0, 1, 1, 3);
+#else
   simd4i m = { 0,   1,   1,   3   };
   simd4f r = __builtin_shuffle (s, m);
+#endif
   return 0;
 }'''
-  if cc.compiles(gcc_vector_prog, name: 'GCC vector intrinsics')
-    graphene_conf.set('GRAPHENE_HAS_GCC', 1)
-    graphene_simd += [ 'gcc' ]
+  if cc.compiles(vector_intrin_prog, name: 'Vector intrinsics')
+    if cc.get_id() == 'gcc'
+      graphene_conf.set('GRAPHENE_HAS_GCC', 1)
+    endif
+    graphene_conf.set('GRAPHENE_HAS_INTRINSICS', 1)
+    graphene_simd += [ 'intrinsics' ]
   endif
 endif
 
diff --git a/meson_options.txt b/meson_options.txt
index b9a2fb5..2eba0c2 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -10,7 +10,7 @@ option('introspection', type: 'feature',
        description: 'Enable GObject Introspection (depends on GObject)')
 option('gcc_vector', type: 'boolean',
        value: true,
-       description: 'Enable GCC vector fast paths (requires GCC)')
+       description: 'Enable compiler vector intrinsics (requires GCC or Clang)')
 option('sse2', type: 'boolean',
        value: true,
        description: 'Enable SSE2 fast paths (requires SSE2 or later)')
diff --git a/src/graphene-simd4f.c b/src/graphene-simd4f.c
index f3e03c7..6731d8a 100644
--- a/src/graphene-simd4f.c
+++ b/src/graphene-simd4f.c
@@ -58,7 +58,7 @@
  */
 
 /* fast paths are all defined in the graphene-simd4f.h header */
-#if defined(GRAPHENE_USE_SSE) || defined(GRAPHENE_USE_GCC) || defined(GRAPHENE_USE_ARM_NEON)
+#if defined(GRAPHENE_USE_SSE) || defined(GRAPHENE_USE_INTRINSICS) || defined(GRAPHENE_USE_ARM_NEON)
 
 /**
  * graphene_simd4f_init:
diff --git a/src/graphene-simd4x4f.c b/src/graphene-simd4x4f.c
index 8c82626..2373bd5 100644
--- a/src/graphene-simd4x4f.c
+++ b/src/graphene-simd4x4f.c
@@ -43,7 +43,7 @@
 #include <string.h>
 #include <math.h>
 
-#if defined(GRAPHENE_USE_SSE) || defined(GRAPHENE_USE_GCC) || defined(GRAPHENE_USE_ARM_NEON)
+#if defined(GRAPHENE_USE_SSE) || defined(GRAPHENE_USE_INTRINSICS) || defined(GRAPHENE_USE_ARM_NEON)
 
 /**
  * graphene_simd4x4f_transpose_in_place:
