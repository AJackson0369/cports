From 4baa982564f800c70c923936441af8341026718a Mon Sep 17 00:00:00 2001
From: Mark Hindley <mark@hindley.org.uk>
Date: Tue, 13 Dec 2022 16:04:06 +0000
Subject: [PATCH] Support libseat.

Devuan patch. Equivalent to c2e04ebc2b31d068a43caa83026c74334586b320.
---
 configure.ac                                |  18 ++
 hw/xfree86/common/seatd-libseat.h           |  40 +++
 hw/xfree86/common/xf86Events.c              |   9 +
 hw/xfree86/common/xf86Init.c                |   7 +
 hw/xfree86/common/xf86Xinput.c              |  15 +-
 hw/xfree86/os-support/linux/Makefile.am     |   5 +
 hw/xfree86/os-support/linux/lnx_platform.c  |  25 +-
 hw/xfree86/os-support/linux/seatd-libseat.c | 268 ++++++++++++++++++++
 include/dix-config.h.in                     |   3 +
 include/meson.build                         |   1 +
 meson.build                                 |   8 +-
 meson_options.txt                           |   2 +
 12 files changed, 393 insertions(+), 8 deletions(-)
 create mode 100644 hw/xfree86/common/seatd-libseat.h
 create mode 100644 hw/xfree86/os-support/linux/seatd-libseat.c

--- a/configure.ac
+++ b/configure.ac
@@ -566,6 +566,7 @@
 AC_ARG_ENABLE(linux_acpi, AS_HELP_STRING([--disable-linux-acpi], [Disable building ACPI support on Linux (if available).]), [enable_linux_acpi=$enableval], [enable_linux_acpi=yes])
 AC_ARG_ENABLE(linux_apm, AS_HELP_STRING([--disable-linux-apm], [Disable building APM support on Linux (if available).]), [enable_linux_apm=$enableval], [enable_linux_apm=yes])
 AC_ARG_ENABLE(systemd-logind, AS_HELP_STRING([--enable-systemd-logind], [Build systemd-logind support (default: auto)]), [SYSTEMD_LOGIND=$enableval], [SYSTEMD_LOGIND=auto])
+AC_ARG_ENABLE(seatd-libseat, AS_HELP_STRING([--enable-seatd-libseat], [Build seatd-libseat support (default: auto)]), [SEATD_LIBSEAT=$enableval], [SEATD_LIBSEAT=auto])
 AC_ARG_ENABLE(suid-wrapper, AS_HELP_STRING([--enable-suid-wrapper], [Build suid-root wrapper for legacy driver support on rootless xserver systems (default: no)]), [SUID_WRAPPER=$enableval], [SUID_WRAPPER=no])
 
 dnl DDXes.
@@ -882,6 +883,23 @@
 fi
 AM_CONDITIONAL(CONFIG_HAL, [test "x$CONFIG_HAL" = xyes])
 
+if test "x$SEATD_LIBSEAT" = xauto; then
+        if test "x$CONFIG_UDEV" = xyes ; then
+                SEATD_LIBSEAT=yes
+        else
+                SEATD_LIBSEAT=no
+        fi
+fi
+if test "x$SEATD_LIBSEAT" = xyes; then
+        if ! test "x$CONFIG_UDEV" = xyes ; then
+                AC_MSG_ERROR([seatd-libseat is only supported in combination with udev configuration.])
+        fi
+        REQUIRED_LIBS="$REQUIRED_LIBS libseat"
+        AC_DEFINE(SEATD_LIBSEAT, 1, [Enable libseat integration])
+        SYSTEMD_LOGIND=no
+fi
+AM_CONDITIONAL(SEATD_LIBSEAT, [test "x$SEATD_LIBSEAT" = xyes])
+
 if test "x$SYSTEMD_LOGIND" = xauto; then
         if test "x$HAVE_DBUS" = xyes -a "x$CONFIG_UDEV" = xyes ; then
                 SYSTEMD_LOGIND=yes
--- a/hw/xfree86/common/xf86Events.c
+++ b/hw/xfree86/common/xf86Events.c
@@ -85,6 +85,7 @@
 
 #include "xf86platformBus.h"
 #include "systemd-logind.h"
+#include "seatd-libseat.h"
 
 extern void (*xf86OSPMClose) (void);
 
@@ -309,6 +310,7 @@
 
     xf86ReleaseKeys(pInfo->dev);
     ProcessInputEvents();
+    seatd_libseat_close_device(pInfo);
     DisableDevice(pInfo->dev, TRUE);
 }
 
@@ -471,8 +473,10 @@
 
     for (pInfo = xf86InputDevs; pInfo; pInfo = pInfo->next) {
         /* Devices with server managed fds get enabled on logind resume */
-        if (!(pInfo->flags & XI86_SERVER_FD))
+        if (!(pInfo->flags & XI86_SERVER_FD)) {
+            seatd_libseat_open_device(pInfo);
             xf86EnableInputDeviceForVTSwitch(pInfo);
+        }
     }
 
     for (ih = InputHandlers; ih; ih = ih->next) {
--- a/hw/xfree86/common/xf86Init.c
+++ b/hw/xfree86/common/xf86Init.c
@@ -54,6 +54,7 @@
 #include "mi.h"
 #include "dbus-core.h"
 #include "systemd-logind.h"
+#include "seatd-libseat.h"
 
 #include "loaderProcs.h"
 
@@ -339,6 +340,7 @@
             DoShowOptions();
 
         dbus_core_init();
+        seatd_libseat_init();
         systemd_logind_init();
 
         /* Do a general bus probe.  This will be a PCI probe for x86 platforms */
@@ -847,6 +849,7 @@
     if (xorgHWOpenConsole)
         xf86CloseConsole();
 
+    seatd_libseat_fini();
     systemd_logind_fini();
     dbus_core_fini();
 
--- a/hw/xfree86/common/xf86Xinput.c
+++ b/hw/xfree86/common/xf86Xinput.c
@@ -64,6 +64,7 @@
 #include "extinit.h"
 #include "loaderProcs.h"
 #include "systemd-logind.h"
+#include "seatd-libseat.h"
 
 #include "exevents.h"           /* AddInputDevice */
 #include "exglobals.h"
@@ -816,6 +817,8 @@
 
     if (pInp->flags & XI86_SERVER_FD)
         systemd_logind_release_fd(pInp->major, pInp->minor, pInp->fd);
+    else
+        seatd_libseat_close_device(pInp);
 
     /* Remove the entry from the list. */
     if (pInp == xf86InputDevs)
@@ -940,7 +943,8 @@
     if (path && pInfo->major == 0 && pInfo->minor == 0)
         xf86stat(path, &pInfo->major, &pInfo->minor);
 
-    if (path && (drv->capabilities & XI86_DRV_CAP_SERVER_FD)){
+    if (path && (drv->capabilities & XI86_DRV_CAP_SERVER_FD)) {
+        seatd_libseat_open_device(pInfo);
         int fd = systemd_logind_take_fd(pInfo->major, pInfo->minor,
                                         path, &paused);
         if (fd != -1) {
--- a/hw/xfree86/os-support/linux/Makefile.am
+++ b/hw/xfree86/os-support/linux/Makefile.am
@@ -19,6 +19,10 @@
 endif
 endif
 
+if SEATD_LIBSEAT
+LIBSEAT_SRCS = seatd-libseat.c
+endif
+
 if SYSTEMD_LOGIND
 LOGIND_SRCS = systemd-logind.c
 XORG_CFLAGS += $(DBUS_CFLAGS)
@@ -36,6 +40,7 @@
 		     $(srcdir)/../shared/sigio.c \
                      $(ACPI_SRCS) \
                      $(APM_SRCS) \
+                     $(LIBSEAT_SRCS) \
                      $(LOGIND_SRCS) \
 		     $(AGP_SRCS)
 
--- a/hw/xfree86/os-support/linux/lnx_platform.c
+++ b/hw/xfree86/os-support/linux/lnx_platform.c
@@ -19,17 +19,23 @@
 
 #include "hotplug.h"
 #include "systemd-logind.h"
+#include "seatd-libseat.h"
 
 static Bool
 get_drm_info(struct OdevAttributes *attribs, char *path, int delayed_index)
 {
     drmVersionPtr v;
-    int fd;
+    int fd = -1;
     int err = 0;
     Bool paused, server_fd = FALSE;
 
     LogMessage(X_INFO, "Platform probe for %s\n", attribs->syspath);
 
+    fd = seatd_libseat_open_graphics(path);
+    if (fd != -1) {
+        attribs->fd = fd;
+        server_fd = TRUE;
+    }
     fd = systemd_logind_take_fd(attribs->major, attribs->minor, path, &paused);
     if (fd != -1) {
         if (paused) {
@@ -41,12 +47,14 @@
         attribs->fd = fd;
         server_fd = TRUE;
     }
-
-    if (fd == -1)
+    if (fd == -1) {
+        // Try opening the path directly
         fd = open(path, O_RDWR | O_CLOEXEC, 0);
-
-    if (fd == -1)
-        return FALSE;
+        if (fd == -1) {
+            xf86Msg(X_ERROR, "cannot open %s\n", path);
+            return FALSE;
+        }
+    }
 
     /* for a delayed probe we've already added the device */
     if (delayed_index == -1) {
--- /dev/null
+++ b/hw/xfree86/os-support/linux/seatd-libseat.c
@@ -0,0 +1,311 @@
+/*
+ * Copyright Â© 2022 Mark Hindley, Ralph Ronnquist.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Mark Hindley <mark@hindley.org.uk>
+ *          Ralph Ronnquist <ralph.ronnquist@gmail.com>
+ */
+
+#ifdef HAVE_XORG_CONFIG_H
+#include <xorg-config.h>
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <errno.h>
+#include <libseat.h>
+
+#include "os.h"
+#include "linux.h"
+#include "xf86.h"
+#include "xf86platformBus.h"
+#include "xf86Xinput.h"
+#include "xf86Priv.h"
+#include "globals.h"
+#include "seatd-libseat.h"
+
+// ============ libseat client adapter ======================
+
+struct libseat_info {
+    char *session;
+    Bool active;
+    Bool vt_active;
+    /*
+     * This pointer gets initialised to the actual libseat client instance
+     * provided by libseat_open_seat.
+     */
+    struct libseat *client;
+    int graphics_id;
+};
+static struct libseat_info seat_info;
+
+/*
+ * The seat has been enabled, and is now valid for use. Re-open all
+ * seat devices to ensure that they are operational, as existing fds
+ * may have had their functionality blocked or revoked.
+ */
+static void
+enable_seat(struct libseat *seat, void *userdata)
+{
+    (void) userdata;
+    LogMessage(X_INFO, "seatd_libseat enable\n");
+    seat_info.active = TRUE;
+    seat_info.vt_active = TRUE;
+    xf86VTEnter();
+}
+
+/*
+ * The seat has been disabled. This event signals that the application
+ * is going to lose its seat access. The event *must* be acknowledged
+ * with libseat_disable_seat shortly after receiving this event.
+ *
+ * If the recepient fails to acknowledge the event in time, seat
+ * devices may be forcibly revoked by the seat provider.
+ */
+static void
+disable_seat(struct libseat *seat, void *userdata)
+{
+    (void) userdata;
+    LogMessage(X_INFO, "seatd_libseat disable\n");
+    seat_info.vt_active = FALSE;
+    xf86VTLeave();
+    if (libseat_disable_seat(seat)) {
+        LogMessage(X_ERROR, "seatd_libseat disable failed: %d\n", errno);
+    }
+}
+
+/*
+ * Callbacks for handling the libseat events.
+ */
+static struct
+libseat_seat_listener client_callbacks = {
+    .enable_seat = enable_seat,
+    .disable_seat = disable_seat,
+};
+
+/*
+ * Check libseat is initialised and active.
+ */
+static Bool
+libseat_active(void)
+{
+    if (!seat_info.client) {
+        LogMessageVerb(X_DEBUG, 5, "seatd_libseat not initialised!\n");
+        return FALSE;
+    }
+    if (!seat_info.active) {
+        LogMessage(X_DEBUG, "seatd_libseat not active\n");
+        return FALSE;
+    }
+    return TRUE;
+}
+
+/*
+ * Handle libseat events
+ */
+static int
+libseat_handle_events(int timeout)
+{
+    int ret;
+
+    while ((ret = libseat_dispatch(seat_info.client, timeout)) > 0)
+        LogMessage(X_INFO, "seatd_libseat handled %i events\n", ret);
+    if (ret == -1) {
+        LogMessage(X_ERROR, "libseat_dispatch() failed: %s\n", strerror(errno));
+        return -1;
+    }
+    return ret;
+}
+
+/*
+ * Handle libseat logging.
+ */
+static void
+log_libseat(enum libseat_log_level level, const char *fmt, va_list args)
+{
+    MessageType xmt;
+    size_t xfmt_size = strlen(fmt) + 2;
+    char *xfmt;
+
+    xfmt = malloc(xfmt_size);
+    if (xfmt == NULL)
+        return;
+    snprintf(xfmt, xfmt_size, "%s\n", fmt);
+
+    switch (level) {
+    case LIBSEAT_LOG_LEVEL_INFO:
+        xmt = X_INFO;
+        break;
+    case LIBSEAT_LOG_LEVEL_ERROR:
+        xmt = X_ERROR;
+        break;
+    default:
+        xmt = X_DEBUG;
+    }
+    LogVMessageVerb(xmt, 0, xfmt, args);
+
+    free(xfmt);
+}
+
+// ============== seatd-libseat.h API functions =============
+
+/*
+ * Initialise the libseat client.
+ *
+ * Returns:
+ *   0 if all ok
+ *   1 if not possible
+ *   -EPERM (-1) if it was already initialised
+ *   -EPIPE (-32) if the seat opening failed.
+ */
+int
+seatd_libseat_init(void)
+{
+    if (!ServerIsNotSeat0() && xf86HasTTYs() && linux_parse_vt_settings(TRUE) && !linux_get_keeptty()) {
+        LogMessage(X_INFO,
+            "seat-libseat: libseat integration requires -keeptty and "
+            "-keeptty was not provided, disabling libseat integration\n");
+        return 1;
+    }
+
+    libseat_set_log_level(LIBSEAT_LOG_LEVEL_DEBUG);
+    libseat_set_log_handler(log_libseat);
+    LogMessage(X_INFO, "seatd_libseat init\n");
+    if (libseat_active()) {
+        LogMessage(X_ERROR, "seatd_libseat already initialised\n");
+        return -EPERM;
+    }
+    seat_info.graphics_id = -1;
+    seat_info.client = libseat_open_seat(&client_callbacks, NULL);
+    if (!seat_info.client) {
+        LogMessage(X_ERROR, "Cannot set up seatd_libseat client\n");
+        return -EPIPE;
+    }
+    if (libseat_handle_events(100) < 0) {
+        libseat_close_seat(seat_info.client);
+        return -EPIPE;
+    }
+    LogMessage(X_INFO, "seatd_libseat client activated\n");
+    return 0;
+}
+
+/*
+ * Shutdown the libseat client.
+ */
+void
+seatd_libseat_fini(void)
+{
+    if (seat_info.client) {
+        LogMessage(X_INFO, "seatd_libseat finish\n");
+        libseat_close_seat(seat_info.client);
+    }
+    seat_info.graphics_id = -1;
+    seat_info.active = FALSE;
+    seat_info.client = NULL;
+}
+
+/*
+ * Open the graphics device
+ *
+ * Return
+ *   file descriptor (>=0) if all is ok.
+ *   -EPERM (-1) if the libseat client is not activated
+ *   -EAGAIN (-11) if the VT is not active
+ *   -errno from libseat_open_device if device access failed
+ */
+int
+seatd_libseat_open_graphics(const char *path)
+{
+    int fd, id;
+
+    if (!libseat_active()) {
+        return -EPERM;
+    }
+    LogMessage(X_INFO, "seatd_libseat try open graphics %s\n", path);
+    if ((id = libseat_open_device(seat_info.client, path, &fd)) == -1) {
+        fd = -errno;
+        LogMessage(X_ERROR, "seatd_libseat open graphics %s (%d) failed: %d\n",
+                   path, id, fd);
+    }
+    else {
+        LogMessage(X_INFO, "seatd_libseat opened graphics: %s (%d:%d)\n", path,
+                   id, fd);
+    }
+    seat_info.graphics_id = id;
+    return fd;
+}
+
+/*
+ * Open an input device.
+ *
+ * The function sets the p->options "libseat_id" for the device when
+ * successful.
+ */
+void
+seatd_libseat_open_device(InputInfoPtr p)
+{
+    int id, fd;
+    char *path = xf86CheckStrOption(p->options, "Device", NULL);
+
+    if (!libseat_active()) {
+        return;
+    }
+    LogMessage(X_INFO, "seatd_libseat try open %s\n", path);
+    if ((id = libseat_open_device(seat_info.client, path, &fd)) == -1) {
+        fd = -errno;
+        LogMessage(X_ERROR, "seatd_libseat open %s (%d) failed: %d\n", path, id,
+                   fd);
+    }
+    else {
+        p->options = xf86ReplaceIntOption(p->options, "fd", fd);
+        p->options = xf86ReplaceIntOption(p->options, "libseat_id", id);
+        LogMessage(X_INFO, "seatd_libseat opened %s (%d:%d)\n", path, id, fd);
+    }
+}
+
+/*
+ * Release an input device.
+ */
+void
+seatd_libseat_close_device(InputInfoPtr p)
+{
+    char *path = xf86CheckStrOption(p->options, "Device", NULL);
+    int fd = xf86CheckIntOption(p->options, "fd", -1);
+    int id = xf86CheckIntOption(p->options, "libseat_id", -1);
+
+    if (!libseat_active())
+        return;
+    LogMessage(X_INFO, "seatd_libseat try close %s (%d:%d)\n", path, id, fd);
+    if (fd < 0) {
+        LogMessage(X_ERROR, "seatd_libseat device not open (%s)\n", path);
+        return;
+    }
+    if (id < 0) {
+        LogMessage(X_ERROR, "seatd_libseat no libseat ID\n");
+        return;
+    }
+    if (libseat_close_device(seat_info.client, id)) {
+        LogMessage(X_ERROR, "seatd_libseat close failed %d\n", -errno);
+    }
+    close(fd);
+}
--- a/include/dix-config.h.in
+++ b/include/dix-config.h.in
@@ -415,6 +415,9 @@
 /* Support HAL for hotplug */
 #undef CONFIG_HAL
 
+/* Enable libseat integration */
+#undef SEATD_LIBSEAT
+
 /* Enable systemd-logind integration */
 #undef SYSTEMD_LOGIND 1
 
--- a/include/meson.build
+++ b/include/meson.build
@@ -96,6 +96,7 @@
 conf_data.set('CONFIG_UDEV_KMS', build_udev_kms ? '1' : false)
 conf_data.set('HAVE_DBUS', build_dbus ? '1' : false)
 conf_data.set('CONFIG_HAL', build_hal ? '1' : false)
+conf_data.set('SEATD_LIBSEAT', build_seatd_libseat ? '1' : false)
 conf_data.set('SYSTEMD_LOGIND', build_systemd_logind ? '1' : false)
 conf_data.set('NEED_DBUS', build_systemd_logind or build_hal ? '1' : false)
 conf_data.set('CONFIG_WSCONS', host_machine.system() == 'openbsd' ? '1' : false)
--- a/meson.build
+++ b/meson.build
@@ -172,8 +172,14 @@
     hal_option = 'false'
 endif
 
+if get_option('seatd_libseat') == 'auto'
+    build_seatd_libseat = build_udev_kms
+else
+    build_seatd_libseat = get_option('seatd_libseat') == 'true'
+endif
+
 if get_option('systemd_logind') == 'auto'
-    build_systemd_logind = build_udev_kms and dbus_dep.found()
+    build_systemd_logind = build_udev_kms and dbus_dep.found() and not build_seatd_libseat
 else
     build_systemd_logind = get_option('systemd_logind') == 'true'
 endif
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -67,6 +67,8 @@
        description: 'Enable HAL integration')
 option('systemd_logind', type: 'combo', choices: ['true', 'false', 'auto'], value: 'auto',
        description: 'Enable systemd-logind integration')
+option('seatd_libseat', type: 'combo', choices: ['true', 'false', 'auto'], value: 'auto',
+       description: 'Enable seatd-libseat integration')
 option('vgahw', type: 'combo', choices: ['true', 'false', 'auto'], value: 'auto',
        description: 'Xorg VGA access module')
 option('dpms', type: 'boolean', value: true,
--- a/include/Makefile.am
+++ b/include/Makefile.am
@@ -75,6 +75,7 @@
 	eventconvert.h eventstr.h inpututils.h \
 	probes.h \
 	protocol-versions.h \
+	seatd-libseat.h \
 	swaprep.h \
 	swapreq.h \
 	systemd-logind.h \
--- /dev/null
+++ b/include/seatd-libseat.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright Â© 2022 Mark Hindley, Ralph Ronnquist.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Mark Hindley <mark@hindley.org.uk>
+ *          Ralph Ronnquist <ralph.ronnquist@gmail.com>
+ */
+
+#ifndef SEATD_LIBSEAT_H
+#define SEATD_LIBSEAT_H
+
+#ifdef SEATD_LIBSEAT
+#include <xf86Xinput.h>
+extern int seatd_libseat_init(void);
+extern void seatd_libseat_fini(void);
+extern int seatd_libseat_open_graphics(const char *path);
+extern void seatd_libseat_open_device(InputInfoPtr p);
+extern void seatd_libseat_close_device(InputInfoPtr p);
+#else
+#define seatd_libseat_init()
+#define seatd_libseat_fini()
+#define seatd_libseat_open_graphics(path) -1
+#define seatd_libseat_open_device(p)
+#define seatd_libseat_close_device(p)
+#endif
+
+#endif
