This is not upstreamable as-is, but I hope to replace this
with some more proper solution later. Once an upstream patch
exists, it will get replaced and dinit-chimera will be updated.

From 884527fccc54c041b1d6d1efd52f3c96d35f719c Mon Sep 17 00:00:00 2001
From: Daniel Kolesa <q66@chimera-linux.org>
Date: Sun, 20 Nov 2022 17:01:48 +0100
Subject: [PATCH] implement support for dinit shutdown hook

---
 src/shutdown.cc | 39 +++++++++++++++++++++++++++++++++------
 1 file changed, 33 insertions(+), 6 deletions(-)

diff --git a/src/shutdown.cc b/src/shutdown.cc
index b4b727a..88c8e76 100644
--- a/src/shutdown.cc
+++ b/src/shutdown.cc
@@ -38,6 +38,7 @@ class subproc_buffer;
 void do_system_shutdown(shutdown_type_t shutdown_type);
 static void unmount_disks(loop_t &loop, subproc_buffer &sub_buf);
 static void swap_off(loop_t &loop, subproc_buffer &sub_buf);
+static bool shutdown_hook(loop_t &loop, subproc_buffer &sub_buf);
 
 constexpr static int subproc_bufsize = 4096;
 
@@ -454,12 +455,14 @@ void do_system_shutdown(shutdown_type_t shutdown_type)
 
     kill(-1, SIGKILL);
     
-    // perform shutdown
-    sub_buf.append("Turning off swap...\n");
-    swap_off(loop, sub_buf);
-    sub_buf.append("Unmounting disks...\n");
-    unmount_disks(loop, sub_buf);
-    sync();
+    if (!shutdown_hook(loop, sub_buf)) {
+        // perform shutdown
+        sub_buf.append("Turning off swap...\n");
+        swap_off(loop, sub_buf);
+        sub_buf.append("Unmounting disks...\n");
+        unmount_disks(loop, sub_buf);
+        sync();
+    }
     
     sub_buf.append("Issuing shutdown via kernel...\n");
     loop.poll();  // give message a chance to get to console
@@ -617,3 +620,27 @@ static void swap_off(loop_t &loop, subproc_buffer &sub_buf)
         sub_buf.append("\n");
     }
 }
+
+static bool shutdown_hook(loop_t &loop, subproc_buffer &sub_buf)
+{
+    const char * hook_path = "/usr/libexec/dinit/shutdown";
+    struct stat st;
+
+    if (lstat(hook_path, &st) || !(st.st_mode & S_IXUSR)) {
+        // fall back to builtin behavior
+        return false;
+    }
+
+    try {
+        const char * shutdown_args[] = { hook_path, nullptr };
+        run_process(shutdown_args, loop, sub_buf);
+    }
+    catch (std::exception &e) {
+        sub_buf.append("Couldn't fork for shutdown hook: ");
+        sub_buf.append(e.what());
+        sub_buf.append("\n");
+        return false;
+    }
+
+    return true;
+}
-- 
2.34.1

