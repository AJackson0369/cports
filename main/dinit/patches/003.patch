From d16f2b705ccecbd8c76a5199a408af8b7a28207d Mon Sep 17 00:00:00 2001
From: Davin McCall <davmac@davmac.org>
Date: Sat, 11 Nov 2023 14:20:11 +1000
Subject: [PATCH] control protocol: implement CLOSEHANDLE command

---
 src/control.cc               | 45 ++++++++++++++++++++++++++++++++++--
 src/includes/control-cmds.h  |  2 ++
 src/includes/control.h       |  3 +++
 src/tests/cptests/cptests.cc | 29 +++++++++++++++++++++++
 4 files changed, 77 insertions(+), 2 deletions(-)

diff --git a/src/control.cc b/src/control.cc
index f2922bb0..914c3243 100644
--- a/src/control.cc
+++ b/src/control.cc
@@ -16,6 +16,7 @@
 // 1 - dinit 0.16 and prior
 // 2 - dinit 0.17 (adds SETTRIGGER, CATLOG, SIGNAL)
 // 3 - dinit 0.17.1 (adds QUERYSERVICEDSCDIR)
+// 4 - (unreleased) (adds CLOSEHANDLE)
 
 // common communication datatypes
 using namespace dinit_cptypes;
@@ -45,7 +46,7 @@ bool control_conn_t::process_packet()
     cp_cmd pktType = (cp_cmd)rbuf[0];
     if (pktType == cp_cmd::QUERYVERSION) {
         // Responds with:
-        // cp_rply::CVERSION, (2 byte) minimum compatible version, (2 byte) actual version
+        // cp_rply::CPVERSION, (2 byte) minimum compatible version, (2 byte) actual version
         char replyBuf[] = { (char)cp_rply::CPVERSION, 0, 0, 0, 0 };
         memcpy(replyBuf + 1, &min_compat_version, 2);
         memcpy(replyBuf + 3, &cp_version, 2);
@@ -56,6 +57,9 @@ bool control_conn_t::process_packet()
     if (pktType == cp_cmd::FINDSERVICE || pktType == cp_cmd::LOADSERVICE) {
         return process_find_load(pktType);
     }
+    if (pktType == cp_cmd::CLOSEHANDLE) {
+        return process_close_handle();
+    }
     if (pktType == cp_cmd::STARTSERVICE || pktType == cp_cmd::STOPSERVICE
             || pktType == cp_cmd::WAKESERVICE || pktType == cp_cmd::RELEASESERVICE) {
         return process_start_stop(pktType);
@@ -219,6 +223,43 @@ bool control_conn_t::process_find_load(cp_cmd pktType)
     return true;
 }
 
+bool control_conn_t::process_close_handle()
+{
+    constexpr int pkt_size = 1 + sizeof(handle_t);
+
+    if (rbuf.get_length() < pkt_size) {
+        chklen = pkt_size;
+        return true;
+    }
+
+    handle_t handle;
+    rbuf.extract((char *) &handle, 1, sizeof(handle));
+
+    rbuf.consume(pkt_size);
+    chklen = 0;
+
+    auto key_it = key_service_map.find(handle);
+    if (key_it == key_service_map.end()) {
+        // Service handle is bad
+        char badreq_rep[] = { (char)cp_rply::BADREQ };
+        if (!queue_packet(badreq_rep, 1)) return false;
+        bad_conn_close = true;
+        return true;
+    }
+
+    service_record *service = key_it->second;
+    key_service_map.erase(key_it);
+
+    auto it = service_key_map.equal_range(service).first;
+    while (it->second != handle) {
+        ++it;
+    }
+    service_key_map.erase(it);
+
+    char ack_reply[] = { (char)cp_rply::ACK };
+    return queue_packet(ack_reply, sizeof(ack_reply));
+}
+
 bool control_conn_t::check_dependents(service_record *service, bool &had_dependents)
 {
     std::vector<char> reply_pkt;
@@ -275,7 +316,7 @@ bool control_conn_t::process_start_stop(cp_cmd pktType)
     if (service == nullptr) {
         // Service handle is bad
         char badreqRep[] = { (char)cp_rply::BADREQ };
-        if (! queue_packet(badreqRep, 1)) return false;
+        if (!queue_packet(badreqRep, 1)) return false;
         bad_conn_close = true;
         return true;
     }
diff --git a/src/includes/control-cmds.h b/src/includes/control-cmds.h
index 57067199..ba623d62 100644
--- a/src/includes/control-cmds.h
+++ b/src/includes/control-cmds.h
@@ -68,6 +68,8 @@ enum class cp_cmd : dinit_cptypes::cp_cmd_t {
     // Query service description directory
     QUERYSERVICEDSCDIR = 22,
 
+    // "Close" a service handle
+    CLOSEHANDLE = 23,
 };
 
 // Replies:
diff --git a/src/includes/control.h b/src/includes/control.h
index e7faea1f..124a73d9 100644
--- a/src/includes/control.h
+++ b/src/includes/control.h
@@ -140,6 +140,9 @@ class control_conn_t : private service_listener
     // Process a FINDSERVICE/LOADSERVICE packet. May throw std::bad_alloc.
     bool process_find_load(cp_cmd pktType);
 
+    // Process a CLOSEHANDLE packet.
+    bool process_close_handle();
+
     // Process an UNPINSERVICE packet. May throw std::bad_alloc.
     bool process_unpin_service();
     
diff --git a/src/tests/cptests/cptests.cc b/src/tests/cptests/cptests.cc
index f4a9e836..cfdcec0a 100644
--- a/src/tests/cptests/cptests.cc
+++ b/src/tests/cptests/cptests.cc
@@ -1081,6 +1081,34 @@ void cptest_two_commands()
     delete cc;
 }
 
+void cptest_closehandle()
+{
+    service_set sset;
+
+    const char * const service_name_1 = "test-service-1";
+
+    service_record *s1 = new service_record(&sset, service_name_1, service_type_t::INTERNAL, {});
+    sset.add_service(s1);
+
+    int fd = bp_sys::allocfd();
+    auto *cc = new control_conn_t(event_loop, &sset, fd);
+
+    handle_t hndl = find_service(fd, service_name_1, service_state_t::STOPPED, service_state_t::STOPPED);
+
+    std::vector<char> cmd = { (char)cp_cmd::CLOSEHANDLE };
+    cmd.insert(cmd.end(), (char *)&hndl, (char *)&hndl + sizeof(hndl));
+    bp_sys::supply_read_data(fd, std::move(cmd));
+    event_loop.regd_bidi_watchers[fd]->read_ready(event_loop, fd);
+
+    std::vector<char> wdata;
+    bp_sys::extract_written_data(fd, wdata);
+
+    assert(wdata.size() == 1);
+    assert(wdata[0] == (char)cp_rply::ACK);
+
+    delete cc;
+}
+
 
 #define RUN_TEST(name, spacing) \
     std::cout << #name "..." spacing << std::flush; \
@@ -1107,5 +1135,6 @@ int main(int argc, char **argv)
     RUN_TEST(cptest_servicestatus, "      ");
     RUN_TEST(cptest_sendsignal, "         ");
     RUN_TEST(cptest_two_commands, "       ");
+    RUN_TEST(cptest_closehandle, "        ");
     return 0;
 }
