this is pointless and takes time

--- a/td/CMakeLists.txt
+++ b/td/CMakeLists.txt
@@ -213,11 +213,6 @@ endif()
 set(TDE2E_ENABLE_INSTALL ${TD_INSTALL_STATIC_LIBRARIES} CACHE BOOL "" FORCE)
 add_subdirectory(tde2e)
 
-if (NOT CMAKE_CROSSCOMPILING)
-  add_subdirectory(benchmark)
-endif()
-
-
 get_directory_property(HAS_PARENT PARENT_DIRECTORY)
 if (HAS_PARENT)
   set(TL_TD_JSON_AUTO ${TL_TD_JSON_AUTO_SOURCE} PARENT_SCOPE) # used in tdbot
@@ -1284,18 +1284,9 @@ set(TD_JSON_SOURCE td/telegram/td_json_client.cpp td/telegram/td_log.cpp)
 
 include(GenerateExportHeader)
 
-add_library(tdjson SHARED ${TD_JSON_SOURCE} ${TD_JSON_HEADERS})
-target_link_libraries(tdjson PRIVATE tdjson_private)
-generate_export_header(tdjson EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/td/telegram/tdjson_export.h)
-target_include_directories(tdjson PUBLIC
-  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
-  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
-if (APPLE)
-  set_target_properties(tdjson PROPERTIES LINK_FLAGS "-Wl,-exported_symbols_list,${CMAKE_CURRENT_SOURCE_DIR}/tdclientjson_export_list")
-endif()
-
 add_library(tdjson_static STATIC ${TD_JSON_SOURCE} ${TD_JSON_HEADERS})
 target_link_libraries(tdjson_static PRIVATE tdjson_private)
+generate_export_header(tdjson_static BASE_NAME tdjson EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/td/telegram/tdjson_export.h)
 target_compile_definitions(tdjson_static PUBLIC TDJSON_STATIC_DEFINE)
 target_include_directories(tdjson_static PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
@@ -1309,36 +1309,6 @@ if (EMSCRIPTEN)
   target_link_libraries(${TD_EMSCRIPTEN} PRIVATE tdjson_static tdactor)
 endif()
 
-if (NOT CMAKE_CROSSCOMPILING)
-  add_executable(tg_cli td/telegram/cli.cpp ${TL_TD_JSON_SOURCE})
-
-  if (NOT READLINE_FOUND)
-    find_package(Readline QUIET)
-  endif()
-  if (READLINE_FOUND)
-    message(STATUS "Found Readline: ${READLINE_INCLUDE_DIR} ${READLINE_LIBRARY}")
-    if (NOT USABLE_READLINE_FOUND)
-      set(CMAKE_REQUIRED_INCLUDES "${READLINE_INCLUDE_DIR}")
-      set(CMAKE_REQUIRED_LIBRARIES "${READLINE_LIBRARY}")
-      include(CheckCXXSourceCompiles)
-      unset(USABLE_READLINE_FOUND CACHE)
-      check_cxx_source_compiles("#include <stdio.h>\n#include <readline/readline.h>\nint main() { rl_free(0); }" USABLE_READLINE_FOUND)
-      if (NOT USABLE_READLINE_FOUND)
-        message(STATUS "Found Readline is too old, ignore it (this is NOT an error)")
-        unset(READLINE_INCLUDE_DIR CACHE)
-        unset(READLINE_LIBRARY CACHE)
-      endif()
-    endif()
-    if (USABLE_READLINE_FOUND)
-      target_link_libraries(tg_cli PRIVATE ${READLINE_LIBRARY})
-      target_include_directories(tg_cli SYSTEM PRIVATE ${READLINE_INCLUDE_DIR})
-      target_compile_definitions(tg_cli PRIVATE -DUSE_READLINE=1)
-    endif()
-  endif()
-  target_link_libraries(tg_cli PRIVATE memprof tdclient tdcore)
-  add_dependencies(tg_cli tl_generate_json)
-endif()
-
 # Exported libraries
 add_library(TdStatic INTERFACE)
 target_link_libraries(TdStatic INTERFACE tdclient)
@@ -1403,6 +1403,3 @@ write_basic_package_version_file("TdConfigVersion.cmake"
 install(FILES "TdConfig.cmake" "${CMAKE_CURRENT_BINARY_DIR}/TdConfigVersion.cmake"
   DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/Td"
 )
-
-# Add SOVERSION to shared libraries
-set_property(TARGET tdjson PROPERTY SOVERSION "${TDLib_VERSION}")
--- a/td/tdactor/CMakeLists.txt
+++ b/td/tdactor/CMakeLists.txt
@@ -48,11 +48,6 @@ add_library(tdactor STATIC ${TDACTOR_SOURCE})
 target_include_directories(tdactor PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
 target_link_libraries(tdactor PUBLIC tdutils)
 
-if (NOT CMAKE_CROSSCOMPILING)
-  add_executable(example example/example.cpp)
-  target_link_libraries(example PRIVATE tdactor)
-endif()
-
 if (TDACTOR_ENABLE_INSTALL)
   install(TARGETS tdactor EXPORT TdStaticTargets
     LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
--- a/td/tddb/CMakeLists.txt
+++ b/td/tddb/CMakeLists.txt
@@ -52,11 +52,6 @@ add_library(tddb STATIC ${TDDB_SOURCE})
 target_include_directories(tddb PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
 target_link_libraries(tddb PUBLIC tdactor tdutils PRIVATE tdsqlite)
 
-if (NOT CMAKE_CROSSCOMPILING)
-  add_executable(binlog_dump td/db/binlog/binlog_dump.cpp)
-  target_link_libraries(binlog_dump PRIVATE tddb)
-endif()
-
 if (TDDB_ENABLE_INSTALL)
   install(TARGETS tddb EXPORT TdStaticTargets
     LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
